// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package lamis3_etl.hts_migration_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tLibraryLoad_1
//import java.util.List;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.Set;
import java.util.HashSet;

//the import part of tJava_6
//import java.util.List;

//the import part of tLibraryLoad_2
//import java.util.List;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.Set;
import java.util.HashSet;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tLibraryLoad_3
//import java.util.List;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.Set;
import java.util.HashSet;

//the import part of tJavaRow_3
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: hts_migration Purpose: To migrate HIV enrollment records<br>
 * Description: <br>
 * 
 * @author deborah.obanisola@thepalladiumgroup.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class hts_migration implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (LAMIS3_Password != null) {

				this.setProperty("LAMIS3_Password", LAMIS3_Password.toString());

			}

			if (LAMIS3_Server != null) {

				this.setProperty("LAMIS3_Server", LAMIS3_Server.toString());

			}

			if (LAMIS3_Login != null) {

				this.setProperty("LAMIS3_Login", LAMIS3_Login.toString());

			}

			if (LAMIS3_Port != null) {

				this.setProperty("LAMIS3_Port", LAMIS3_Port.toString());

			}

			if (LAMIS3_Database != null) {

				this.setProperty("LAMIS3_Database", LAMIS3_Database.toString());

			}

			if (LAMIS3_AdditionalParams != null) {

				this.setProperty("LAMIS3_AdditionalParams", LAMIS3_AdditionalParams.toString());

			}

			if (LAMIS3_Schema != null) {

				this.setProperty("LAMIS3_Schema", LAMIS3_Schema.toString());

			}

			if (LAMISPlus_Server != null) {

				this.setProperty("LAMISPlus_Server", LAMISPlus_Server.toString());

			}

			if (LAMISPlus_Schema != null) {

				this.setProperty("LAMISPlus_Schema", LAMISPlus_Schema.toString());

			}

			if (LAMISPlus_AdditionalParams != null) {

				this.setProperty("LAMISPlus_AdditionalParams", LAMISPlus_AdditionalParams.toString());

			}

			if (LAMISPlus_Login != null) {

				this.setProperty("LAMISPlus_Login", LAMISPlus_Login.toString());

			}

			if (LAMISPlus_Password != null) {

				this.setProperty("LAMISPlus_Password", LAMISPlus_Password.toString());

			}

			if (LAMISPlus_Database != null) {

				this.setProperty("LAMISPlus_Database", LAMISPlus_Database.toString());

			}

			if (LAMISPlus_Port != null) {

				this.setProperty("LAMISPlus_Port", LAMISPlus_Port.toString());

			}

			if (application_codeset_not_present != null) {

				this.setProperty("application_codeset_not_present", application_codeset_not_present.toString());

			}

		}

		public java.lang.String LAMIS3_Password;

		public java.lang.String getLAMIS3_Password() {
			return this.LAMIS3_Password;
		}

		public String LAMIS3_Server;

		public String getLAMIS3_Server() {
			return this.LAMIS3_Server;
		}

		public String LAMIS3_Login;

		public String getLAMIS3_Login() {
			return this.LAMIS3_Login;
		}

		public String LAMIS3_Port;

		public String getLAMIS3_Port() {
			return this.LAMIS3_Port;
		}

		public String LAMIS3_Database;

		public String getLAMIS3_Database() {
			return this.LAMIS3_Database;
		}

		public String LAMIS3_AdditionalParams;

		public String getLAMIS3_AdditionalParams() {
			return this.LAMIS3_AdditionalParams;
		}

		public String LAMIS3_Schema;

		public String getLAMIS3_Schema() {
			return this.LAMIS3_Schema;
		}

		public String LAMISPlus_Server;

		public String getLAMISPlus_Server() {
			return this.LAMISPlus_Server;
		}

		public String LAMISPlus_Schema;

		public String getLAMISPlus_Schema() {
			return this.LAMISPlus_Schema;
		}

		public String LAMISPlus_AdditionalParams;

		public String getLAMISPlus_AdditionalParams() {
			return this.LAMISPlus_AdditionalParams;
		}

		public String LAMISPlus_Login;

		public String getLAMISPlus_Login() {
			return this.LAMISPlus_Login;
		}

		public java.lang.String LAMISPlus_Password;

		public java.lang.String getLAMISPlus_Password() {
			return this.LAMISPlus_Password;
		}

		public String LAMISPlus_Database;

		public String getLAMISPlus_Database() {
			return this.LAMISPlus_Database;
		}

		public String LAMISPlus_Port;

		public String getLAMISPlus_Port() {
			return this.LAMISPlus_Port;
		}

		public String application_codeset_not_present;

		public String getApplication_codeset_not_present() {
			return this.application_codeset_not_present;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "hts_migration";
	private final String projectName = "LAMIS3_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					hts_migration.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(hts_migration.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLibraryLoad_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row23_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_20_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("****************HIV ENROLLMENT MIGRATION****************");
				System.out.println(
						"To migrate HIV enrollment records the following tables will be affected on LAMISPlus:");
				System.out.println("1. Visit");
				System.out.println("2. Encounter");
				System.out.println("2. FormData");
				System.out.println(" ");
				System.out.println(" ");
				System.out.println("About to create visit records...");
				System.out.println("...");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				System.out.println("Visit records created");
				int updates = globalMap.get("tDBOutput_2_NB_LINE_UPDATED") != null
						? (Integer) globalMap.get("tDBOutput_2_NB_LINE_UPDATED")
						: 0;
				int inserts = globalMap.get("tDBOutput_2_NB_LINE_INSERTED") != null
						? (Integer) globalMap.get("tDBOutput_2_NB_LINE_INSERTED")
						: 0;
				System.out.println("Total visit records created - " + inserts);
				System.out.println("Total visit records updated - " + updates);
				System.out.println("*****************************************************");
				System.out.println(" ");
				System.out.println(" ");

				System.out.println("About to create encounter records");

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 process_data_begin ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 process_data_begin ] stop
				 */

				/**
				 * [tJava_5 process_data_end ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 process_data_end ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tJava_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				System.out.println("Creating encounter records...");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 process_data_begin ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_begin ] stop
				 */

				/**
				 * [tJava_2 process_data_end ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				System.out.println("Encounter records created");
				int updates = globalMap.get("tDBOutput_1_NB_LINE_UPDATED") != null
						? (Integer) globalMap.get("tDBOutput_1_NB_LINE_UPDATED")
						: 0;
				int inserts = globalMap.get("tDBOutput_1_NB_LINE_INSERTED") != null
						? (Integer) globalMap.get("tDBOutput_1_NB_LINE_INSERTED")
						: 0;
				System.out.println("Total encounter records created - " + inserts);
				System.out.println("Total encounter records updated - " + updates);
				System.out.println("*****************************************************");
				System.out.println(" ");
				System.out.println(" ");

				System.out.println("About to create form_data records");

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 process_data_begin ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 process_data_begin ] stop
				 */

				/**
				 * [tJava_4 process_data_end ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 process_data_end ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_3Process(globalMap);

				/**
				 * [tJava_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				System.out.println("Creating ART Commencement form_data records...");

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 process_data_begin ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_begin ] stop
				 */

				/**
				 * [tJava_3 process_data_end ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				/**
				 * [tJava_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tLibraryLoad_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 process_data_begin ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 process_data_begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 process_data_end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 process_data_end ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				System.out.println("ART Commencement form_data records created");
				int updates = globalMap.get("tDBOutput_4_NB_LINE_UPDATED") != null
						? (Integer) globalMap.get("tDBOutput_4_NB_LINE_UPDATED")
						: 0;
				int inserts = globalMap.get("tDBOutput_3_NB_LINE_INSERTED") != null
						? (Integer) globalMap.get("tDBOutput_3_NB_LINE_INSERTED")
						: 0;
				System.out.println("Total form_data records created - " + inserts);
				System.out.println("Total form_data records updated - " + updates);
				System.out.println("Total records not migrated " + globalMap.get("tFileOutputDelimited_1_NB_LINE"));
				List<String> codesets = Arrays.asList(StringUtils.split(context.application_codeset_not_present, ","));
				if (!codesets.isEmpty()) {
					Set<String> mySet = new HashSet<String>(codesets);

					// mySet.stream().sort(Comparator.reverseOrder());
					System.out.println("List of application codesets not migrated -  ");
					mySet.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);
					// mySet.forEach(System.out::println);
					System.out.println("Update these application codesets and run migration scripts again");

				}
//System.out.println("*******************ART COMMENCEMENT COMPLETED*********************************");

//System.out.println("*****************************************************");//
//System.out.println("Check ./clinic_not_migrated.csv for records that did not migrate. ");

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 process_data_begin ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 process_data_begin ] stop
				 */

				/**
				 * [tJava_6 process_data_end ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 process_data_end ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
			}

			tLibraryLoad_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLibraryLoad_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_2 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_2", false);
				start_Hash.put("tLibraryLoad_2", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_2";

				int tos_count_tLibraryLoad_2 = 0;

				/**
				 * [tLibraryLoad_2 begin ] stop
				 */

				/**
				 * [tLibraryLoad_2 main ] start
				 */

				currentComponent = "tLibraryLoad_2";

				tos_count_tLibraryLoad_2++;

				/**
				 * [tLibraryLoad_2 main ] stop
				 */

				/**
				 * [tLibraryLoad_2 process_data_begin ] start
				 */

				currentComponent = "tLibraryLoad_2";

				/**
				 * [tLibraryLoad_2 process_data_begin ] stop
				 */

				/**
				 * [tLibraryLoad_2 process_data_end ] start
				 */

				currentComponent = "tLibraryLoad_2";

				/**
				 * [tLibraryLoad_2 process_data_end ] stop
				 */

				/**
				 * [tLibraryLoad_2 end ] start
				 */

				currentComponent = "tLibraryLoad_2";

				ok_Hash.put("tLibraryLoad_2", true);
				end_Hash.put("tLibraryLoad_2", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_2 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLibraryLoad_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
			}

			tJava_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_2 finally ] start
				 */

				currentComponent = "tLibraryLoad_2";

				/**
				 * [tLibraryLoad_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				System.out.println("*****************************************************");
				System.out.println("*****************************************************");

				System.out.println("Creating HIV Followup form_data records...");

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 process_data_begin ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 process_data_begin ] stop
				 */

				/**
				 * [tJava_7 process_data_end ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 process_data_end ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				System.out.println("HIV Followup form_data records created");
				int updates = globalMap.get("tDBOutput_5_NB_LINE_UPDATED") != null
						? (Integer) globalMap.get("tDBOutput_5_NB_LINE_UPDATED")
						: 0;
				int inserts = globalMap.get("tDBOutput_6_NB_LINE_INSERTED") != null
						? (Integer) globalMap.get("tDBOutput_6_NB_LINE_INSERTED")
						: 0;
				System.out.println("Total form_data records created - " + inserts);
				System.out.println("Total form_data records updated - " + updates);
				System.out.println("Total records not migrated " + globalMap.get("tFileOutputDelimited_1_NB_LINE"));
				List<String> codesets = Arrays.asList(StringUtils.split(context.application_codeset_not_present, ","));
				if (!codesets.isEmpty()) {
					Set<String> mySet = new HashSet<String>(codesets);

					// mySet.stream().sort(Comparator.reverseOrder());
					System.out.println("List of application codesets not migrated -  ");
					mySet.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);
					// mySet.forEach(System.out::println);
					System.out.println("Update these application codesets and run migration scripts again");

				}
				System.out.println("*******************MIGRATION COMPLETED*********************************");

				System.out.println("*****************************************************");//
				System.out.println("Check ./clinic_not_migrated.csv for records that did not migrate. ");

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 process_data_begin ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 process_data_begin ] stop
				 */

				/**
				 * [tJava_8 process_data_end ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 process_data_end ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				/**
				 * [tJava_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLibraryLoad_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_3 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_3", false);
				start_Hash.put("tLibraryLoad_3", System.currentTimeMillis());

				currentComponent = "tLibraryLoad_3";

				int tos_count_tLibraryLoad_3 = 0;

				/**
				 * [tLibraryLoad_3 begin ] stop
				 */

				/**
				 * [tLibraryLoad_3 main ] start
				 */

				currentComponent = "tLibraryLoad_3";

				tos_count_tLibraryLoad_3++;

				/**
				 * [tLibraryLoad_3 main ] stop
				 */

				/**
				 * [tLibraryLoad_3 process_data_begin ] start
				 */

				currentComponent = "tLibraryLoad_3";

				/**
				 * [tLibraryLoad_3 process_data_begin ] stop
				 */

				/**
				 * [tLibraryLoad_3 process_data_end ] start
				 */

				currentComponent = "tLibraryLoad_3";

				/**
				 * [tLibraryLoad_3 process_data_end ] stop
				 */

				/**
				 * [tLibraryLoad_3 end ] start
				 */

				currentComponent = "tLibraryLoad_3";

				ok_Hash.put("tLibraryLoad_3", true);
				end_Hash.put("tLibraryLoad_3", System.currentTimeMillis());

				/**
				 * [tLibraryLoad_3 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLibraryLoad_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
			}

			tDBInput_20Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_3 finally ] start
				 */

				currentComponent = "tLibraryLoad_3";

				/**
				 * [tLibraryLoad_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_3_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_LAMIS3_ETL_hts_migration = new byte[0];
		static byte[] commonByteArray_LAMIS3_ETL_hts_migration = new byte[0];

		public String patient_number;

		public String getPatient_number() {
			return this.patient_number;
		}

		public String details;

		public String getDetails() {
			return this.details;
		}

		public String uuid;

		public String getUuid() {
			return this.uuid;
		}

		public int archived;

		public int getArchived() {
			return this.archived;
		}

		public String created_by;

		public String getCreated_by() {
			return this.created_by;
		}

		public java.util.Date date_modified;

		public java.util.Date getDate_modified() {
			return this.date_modified;
		}

		public long organisation_unit_id;

		public long getOrganisation_unit_id() {
			return this.organisation_unit_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LAMIS3_ETL_hts_migration.length) {
					if (length < 1024 && commonByteArray_LAMIS3_ETL_hts_migration.length == 0) {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[1024];
					} else {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LAMIS3_ETL_hts_migration, 0, length);
				strReturn = new String(commonByteArray_LAMIS3_ETL_hts_migration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LAMIS3_ETL_hts_migration) {

				try {

					int length = 0;

					this.patient_number = readString(dis);

					this.details = readString(dis);

					this.uuid = readString(dis);

					this.archived = dis.readInt();

					this.created_by = readString(dis);

					this.date_modified = readDate(dis);

					this.organisation_unit_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.patient_number, dos);

				// String

				writeString(this.details, dos);

				// String

				writeString(this.uuid, dos);

				// int

				dos.writeInt(this.archived);

				// String

				writeString(this.created_by, dos);

				// java.util.Date

				writeDate(this.date_modified, dos);

				// long

				dos.writeLong(this.organisation_unit_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("patient_number=" + patient_number);
			sb.append(",details=" + details);
			sb.append(",uuid=" + uuid);
			sb.append(",archived=" + String.valueOf(archived));
			sb.append(",created_by=" + created_by);
			sb.append(",date_modified=" + String.valueOf(date_modified));
			sb.append(",organisation_unit_id=" + String.valueOf(organisation_unit_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class to_createStruct implements routines.system.IPersistableRow<to_createStruct> {
		final static byte[] commonByteArrayLock_LAMIS3_ETL_hts_migration = new byte[0];
		static byte[] commonByteArray_LAMIS3_ETL_hts_migration = new byte[0];

		public String patient_details;

		public String getPatient_details() {
			return this.patient_details;
		}

		public long facility_id;

		public long getFacility_id() {
			return this.facility_id;
		}

		public String lga_json;

		public String getLga_json() {
			return this.lga_json;
		}

		public String state_json;

		public String getState_json() {
			return this.state_json;
		}

		public String client_code;

		public String getClient_code() {
			return this.client_code;
		}

		public Long assessment_id;

		public Long getAssessment_id() {
			return this.assessment_id;
		}

		public String surname;

		public String getSurname() {
			return this.surname;
		}

		public String other_names;

		public String getOther_names() {
			return this.other_names;
		}

		public java.util.Date date_birth;

		public java.util.Date getDate_birth() {
			return this.date_birth;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String marital_status;

		public String getMarital_status() {
			return this.marital_status;
		}

		public String patient_uuid;

		public String getPatient_uuid() {
			return this.patient_uuid;
		}

		public String patient_number;

		public String getPatient_number() {
			return this.patient_number;
		}

		public String marital_application_codeset;

		public String getMarital_application_codeset() {
			return this.marital_application_codeset;
		}

		public String gender_application_codeset;

		public String getGender_application_codeset() {
			return this.gender_application_codeset;
		}

		public String country_json;

		public String getCountry_json() {
			return this.country_json;
		}

		public java.util.Date date_visit;

		public java.util.Date getDate_visit() {
			return this.date_visit;
		}

		public String uuid;

		public String getUuid() {
			return this.uuid;
		}

		public Long p_organisation_unit_id;

		public Long getP_organisation_unit_id() {
			return this.p_organisation_unit_id;
		}

		public String p_created_by;

		public String getP_created_by() {
			return this.p_created_by;
		}

		public java.util.Date p_date_modified;

		public java.util.Date getP_date_modified() {
			return this.p_date_modified;
		}

		public java.util.Date p_date_created;

		public java.util.Date getP_date_created() {
			return this.p_date_created;
		}

		public Boolean archived;

		public Boolean getArchived() {
			return this.archived;
		}

		public java.util.Date last_modified;

		public java.util.Date getLast_modified() {
			return this.last_modified;
		}

		public Integer p_archived;

		public Integer getP_archived() {
			return this.p_archived;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LAMIS3_ETL_hts_migration.length) {
					if (length < 1024 && commonByteArray_LAMIS3_ETL_hts_migration.length == 0) {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[1024];
					} else {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LAMIS3_ETL_hts_migration, 0, length);
				strReturn = new String(commonByteArray_LAMIS3_ETL_hts_migration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LAMIS3_ETL_hts_migration) {

				try {

					int length = 0;

					this.patient_details = readString(dis);

					this.facility_id = dis.readLong();

					this.lga_json = readString(dis);

					this.state_json = readString(dis);

					this.client_code = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.assessment_id = null;
					} else {
						this.assessment_id = dis.readLong();
					}

					this.surname = readString(dis);

					this.other_names = readString(dis);

					this.date_birth = readDate(dis);

					this.phone = readString(dis);

					this.address = readString(dis);

					this.gender = readString(dis);

					this.marital_status = readString(dis);

					this.patient_uuid = readString(dis);

					this.patient_number = readString(dis);

					this.marital_application_codeset = readString(dis);

					this.gender_application_codeset = readString(dis);

					this.country_json = readString(dis);

					this.date_visit = readDate(dis);

					this.uuid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.p_organisation_unit_id = null;
					} else {
						this.p_organisation_unit_id = dis.readLong();
					}

					this.p_created_by = readString(dis);

					this.p_date_modified = readDate(dis);

					this.p_date_created = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.archived = null;
					} else {
						this.archived = dis.readBoolean();
					}

					this.last_modified = readDate(dis);

					this.p_archived = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.patient_details, dos);

				// long

				dos.writeLong(this.facility_id);

				// String

				writeString(this.lga_json, dos);

				// String

				writeString(this.state_json, dos);

				// String

				writeString(this.client_code, dos);

				// Long

				if (this.assessment_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.assessment_id);
				}

				// String

				writeString(this.surname, dos);

				// String

				writeString(this.other_names, dos);

				// java.util.Date

				writeDate(this.date_birth, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.marital_status, dos);

				// String

				writeString(this.patient_uuid, dos);

				// String

				writeString(this.patient_number, dos);

				// String

				writeString(this.marital_application_codeset, dos);

				// String

				writeString(this.gender_application_codeset, dos);

				// String

				writeString(this.country_json, dos);

				// java.util.Date

				writeDate(this.date_visit, dos);

				// String

				writeString(this.uuid, dos);

				// Long

				if (this.p_organisation_unit_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.p_organisation_unit_id);
				}

				// String

				writeString(this.p_created_by, dos);

				// java.util.Date

				writeDate(this.p_date_modified, dos);

				// java.util.Date

				writeDate(this.p_date_created, dos);

				// Boolean

				if (this.archived == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.archived);
				}

				// java.util.Date

				writeDate(this.last_modified, dos);

				// Integer

				writeInteger(this.p_archived, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("patient_details=" + patient_details);
			sb.append(",facility_id=" + String.valueOf(facility_id));
			sb.append(",lga_json=" + lga_json);
			sb.append(",state_json=" + state_json);
			sb.append(",client_code=" + client_code);
			sb.append(",assessment_id=" + String.valueOf(assessment_id));
			sb.append(",surname=" + surname);
			sb.append(",other_names=" + other_names);
			sb.append(",date_birth=" + String.valueOf(date_birth));
			sb.append(",phone=" + phone);
			sb.append(",address=" + address);
			sb.append(",gender=" + gender);
			sb.append(",marital_status=" + marital_status);
			sb.append(",patient_uuid=" + patient_uuid);
			sb.append(",patient_number=" + patient_number);
			sb.append(",marital_application_codeset=" + marital_application_codeset);
			sb.append(",gender_application_codeset=" + gender_application_codeset);
			sb.append(",country_json=" + country_json);
			sb.append(",date_visit=" + String.valueOf(date_visit));
			sb.append(",uuid=" + uuid);
			sb.append(",p_organisation_unit_id=" + String.valueOf(p_organisation_unit_id));
			sb.append(",p_created_by=" + p_created_by);
			sb.append(",p_date_modified=" + String.valueOf(p_date_modified));
			sb.append(",p_date_created=" + String.valueOf(p_date_created));
			sb.append(",archived=" + String.valueOf(archived));
			sb.append(",last_modified=" + String.valueOf(last_modified));
			sb.append(",p_archived=" + String.valueOf(p_archived));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(to_createStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_LAMIS3_ETL_hts_migration = new byte[0];
		static byte[] commonByteArray_LAMIS3_ETL_hts_migration = new byte[0];

		public String facilityname;

		public String getFacilityname() {
			return this.facilityname;
		}

		public long id;

		public long getId() {
			return this.id;
		}

		public String client_code;

		public String getClient_code() {
			return this.client_code;
		}

		public Long assessment_id;

		public Long getAssessment_id() {
			return this.assessment_id;
		}

		public String hospital_num;

		public String getHospital_num() {
			return this.hospital_num;
		}

		public long state_id;

		public long getState_id() {
			return this.state_id;
		}

		public long lga_id;

		public long getLga_id() {
			return this.lga_id;
		}

		public long facility_id;

		public long getFacility_id() {
			return this.facility_id;
		}

		public String facility_name;

		public String getFacility_name() {
			return this.facility_name;
		}

		public java.util.Date date_visit;

		public java.util.Date getDate_visit() {
			return this.date_visit;
		}

		public String referred_from;

		public String getReferred_from() {
			return this.referred_from;
		}

		public String testing_setting;

		public String getTesting_setting() {
			return this.testing_setting;
		}

		public String surname;

		public String getSurname() {
			return this.surname;
		}

		public String other_names;

		public String getOther_names() {
			return this.other_names;
		}

		public java.util.Date date_birth;

		public java.util.Date getDate_birth() {
			return this.date_birth;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String first_time_visit;

		public String getFirst_time_visit() {
			return this.first_time_visit;
		}

		public String marital_status;

		public String getMarital_status() {
			return this.marital_status;
		}

		public Integer num_children;

		public Integer getNum_children() {
			return this.num_children;
		}

		public Integer num_wives;

		public Integer getNum_wives() {
			return this.num_wives;
		}

		public String type_counseling;

		public String getType_counseling() {
			return this.type_counseling;
		}

		public String index_client;

		public String getIndex_client() {
			return this.index_client;
		}

		public String type_index;

		public String getType_index() {
			return this.type_index;
		}

		public String index_client_code;

		public String getIndex_client_code() {
			return this.index_client_code;
		}

		public Integer knowledge_assessment1;

		public Integer getKnowledge_assessment1() {
			return this.knowledge_assessment1;
		}

		public Integer knowledge_assessment2;

		public Integer getKnowledge_assessment2() {
			return this.knowledge_assessment2;
		}

		public Integer knowledge_assessment3;

		public Integer getKnowledge_assessment3() {
			return this.knowledge_assessment3;
		}

		public Integer knowledge_assessment4;

		public Integer getKnowledge_assessment4() {
			return this.knowledge_assessment4;
		}

		public Integer knowledge_assessment5;

		public Integer getKnowledge_assessment5() {
			return this.knowledge_assessment5;
		}

		public Integer knowledge_assessment6;

		public Integer getKnowledge_assessment6() {
			return this.knowledge_assessment6;
		}

		public Integer knowledge_assessment7;

		public Integer getKnowledge_assessment7() {
			return this.knowledge_assessment7;
		}

		public Integer risk_assessment1;

		public Integer getRisk_assessment1() {
			return this.risk_assessment1;
		}

		public Integer risk_assessment2;

		public Integer getRisk_assessment2() {
			return this.risk_assessment2;
		}

		public Integer risk_assessment3;

		public Integer getRisk_assessment3() {
			return this.risk_assessment3;
		}

		public Integer risk_assessment4;

		public Integer getRisk_assessment4() {
			return this.risk_assessment4;
		}

		public Integer risk_assessment5;

		public Integer getRisk_assessment5() {
			return this.risk_assessment5;
		}

		public Integer risk_assessment6;

		public Integer getRisk_assessment6() {
			return this.risk_assessment6;
		}

		public Integer tb_screening1;

		public Integer getTb_screening1() {
			return this.tb_screening1;
		}

		public Integer tb_screening2;

		public Integer getTb_screening2() {
			return this.tb_screening2;
		}

		public Integer tb_screening3;

		public Integer getTb_screening3() {
			return this.tb_screening3;
		}

		public Integer tb_screening4;

		public Integer getTb_screening4() {
			return this.tb_screening4;
		}

		public Integer sti_screening1;

		public Integer getSti_screening1() {
			return this.sti_screening1;
		}

		public Integer sti_screening2;

		public Integer getSti_screening2() {
			return this.sti_screening2;
		}

		public Integer sti_screening3;

		public Integer getSti_screening3() {
			return this.sti_screening3;
		}

		public Integer sti_screening4;

		public Integer getSti_screening4() {
			return this.sti_screening4;
		}

		public Integer sti_screening5;

		public Integer getSti_screening5() {
			return this.sti_screening5;
		}

		public String hiv_test_result;

		public String getHiv_test_result() {
			return this.hiv_test_result;
		}

		public String tested_hiv;

		public String getTested_hiv() {
			return this.tested_hiv;
		}

		public Integer post_test1;

		public Integer getPost_test1() {
			return this.post_test1;
		}

		public Integer post_test2;

		public Integer getPost_test2() {
			return this.post_test2;
		}

		public Integer post_test3;

		public Integer getPost_test3() {
			return this.post_test3;
		}

		public Integer post_test4;

		public Integer getPost_test4() {
			return this.post_test4;
		}

		public Integer post_test5;

		public Integer getPost_test5() {
			return this.post_test5;
		}

		public Integer post_test6;

		public Integer getPost_test6() {
			return this.post_test6;
		}

		public Integer post_test7;

		public Integer getPost_test7() {
			return this.post_test7;
		}

		public Integer post_test8;

		public Integer getPost_test8() {
			return this.post_test8;
		}

		public Integer post_test9;

		public Integer getPost_test9() {
			return this.post_test9;
		}

		public Integer post_test10;

		public Integer getPost_test10() {
			return this.post_test10;
		}

		public Integer post_test11;

		public Integer getPost_test11() {
			return this.post_test11;
		}

		public Integer post_test12;

		public Integer getPost_test12() {
			return this.post_test12;
		}

		public Integer post_test13;

		public Integer getPost_test13() {
			return this.post_test13;
		}

		public Integer post_test14;

		public Integer getPost_test14() {
			return this.post_test14;
		}

		public String syphilis_test_result;

		public String getSyphilis_test_result() {
			return this.syphilis_test_result;
		}

		public String hepatitisb_test_result;

		public String getHepatitisb_test_result() {
			return this.hepatitisb_test_result;
		}

		public String hepatitisc_test_result;

		public String getHepatitisc_test_result() {
			return this.hepatitisc_test_result;
		}

		public String sti_referred;

		public String getSti_referred() {
			return this.sti_referred;
		}

		public String tb_referred;

		public String getTb_referred() {
			return this.tb_referred;
		}

		public String art_referred;

		public String getArt_referred() {
			return this.art_referred;
		}

		public String partner_notification;

		public String getPartner_notification() {
			return this.partner_notification;
		}

		public String notification_counseling;

		public String getNotification_counseling() {
			return this.notification_counseling;
		}

		public Integer number_partner;

		public Integer getNumber_partner() {
			return this.number_partner;
		}

		public java.util.Date date_registration;

		public java.util.Date getDate_registration() {
			return this.date_registration;
		}

		public java.util.Date date_started;

		public java.util.Date getDate_started() {
			return this.date_started;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public Double longitude;

		public Double getLongitude() {
			return this.longitude;
		}

		public Double latitude;

		public Double getLatitude() {
			return this.latitude;
		}

		public java.util.Date last_modified;

		public java.util.Date getLast_modified() {
			return this.last_modified;
		}

		public Long deviceconfig_id;

		public Long getDeviceconfig_id() {
			return this.deviceconfig_id;
		}

		public Boolean archived;

		public Boolean getArchived() {
			return this.archived;
		}

		public String uuid;

		public String getUuid() {
			return this.uuid;
		}

		public String extra;

		public String getExtra() {
			return this.extra;
		}

		public String cam_code;

		public String getCam_code() {
			return this.cam_code;
		}

		public String patient_num;

		public String getPatient_num() {
			return this.patient_num;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LAMIS3_ETL_hts_migration.length) {
					if (length < 1024 && commonByteArray_LAMIS3_ETL_hts_migration.length == 0) {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[1024];
					} else {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LAMIS3_ETL_hts_migration, 0, length);
				strReturn = new String(commonByteArray_LAMIS3_ETL_hts_migration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LAMIS3_ETL_hts_migration) {

				try {

					int length = 0;

					this.facilityname = readString(dis);

					this.id = dis.readLong();

					this.client_code = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.assessment_id = null;
					} else {
						this.assessment_id = dis.readLong();
					}

					this.hospital_num = readString(dis);

					this.state_id = dis.readLong();

					this.lga_id = dis.readLong();

					this.facility_id = dis.readLong();

					this.facility_name = readString(dis);

					this.date_visit = readDate(dis);

					this.referred_from = readString(dis);

					this.testing_setting = readString(dis);

					this.surname = readString(dis);

					this.other_names = readString(dis);

					this.date_birth = readDate(dis);

					this.phone = readString(dis);

					this.address = readString(dis);

					this.gender = readString(dis);

					this.first_time_visit = readString(dis);

					this.marital_status = readString(dis);

					this.num_children = readInteger(dis);

					this.num_wives = readInteger(dis);

					this.type_counseling = readString(dis);

					this.index_client = readString(dis);

					this.type_index = readString(dis);

					this.index_client_code = readString(dis);

					this.knowledge_assessment1 = readInteger(dis);

					this.knowledge_assessment2 = readInteger(dis);

					this.knowledge_assessment3 = readInteger(dis);

					this.knowledge_assessment4 = readInteger(dis);

					this.knowledge_assessment5 = readInteger(dis);

					this.knowledge_assessment6 = readInteger(dis);

					this.knowledge_assessment7 = readInteger(dis);

					this.risk_assessment1 = readInteger(dis);

					this.risk_assessment2 = readInteger(dis);

					this.risk_assessment3 = readInteger(dis);

					this.risk_assessment4 = readInteger(dis);

					this.risk_assessment5 = readInteger(dis);

					this.risk_assessment6 = readInteger(dis);

					this.tb_screening1 = readInteger(dis);

					this.tb_screening2 = readInteger(dis);

					this.tb_screening3 = readInteger(dis);

					this.tb_screening4 = readInteger(dis);

					this.sti_screening1 = readInteger(dis);

					this.sti_screening2 = readInteger(dis);

					this.sti_screening3 = readInteger(dis);

					this.sti_screening4 = readInteger(dis);

					this.sti_screening5 = readInteger(dis);

					this.hiv_test_result = readString(dis);

					this.tested_hiv = readString(dis);

					this.post_test1 = readInteger(dis);

					this.post_test2 = readInteger(dis);

					this.post_test3 = readInteger(dis);

					this.post_test4 = readInteger(dis);

					this.post_test5 = readInteger(dis);

					this.post_test6 = readInteger(dis);

					this.post_test7 = readInteger(dis);

					this.post_test8 = readInteger(dis);

					this.post_test9 = readInteger(dis);

					this.post_test10 = readInteger(dis);

					this.post_test11 = readInteger(dis);

					this.post_test12 = readInteger(dis);

					this.post_test13 = readInteger(dis);

					this.post_test14 = readInteger(dis);

					this.syphilis_test_result = readString(dis);

					this.hepatitisb_test_result = readString(dis);

					this.hepatitisc_test_result = readString(dis);

					this.sti_referred = readString(dis);

					this.tb_referred = readString(dis);

					this.art_referred = readString(dis);

					this.partner_notification = readString(dis);

					this.notification_counseling = readString(dis);

					this.number_partner = readInteger(dis);

					this.date_registration = readDate(dis);

					this.date_started = readDate(dis);

					this.note = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.longitude = null;
					} else {
						this.longitude = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.latitude = null;
					} else {
						this.latitude = dis.readDouble();
					}

					this.last_modified = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.deviceconfig_id = null;
					} else {
						this.deviceconfig_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.archived = null;
					} else {
						this.archived = dis.readBoolean();
					}

					this.uuid = readString(dis);

					this.extra = readString(dis);

					this.cam_code = readString(dis);

					this.patient_num = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.facilityname, dos);

				// long

				dos.writeLong(this.id);

				// String

				writeString(this.client_code, dos);

				// Long

				if (this.assessment_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.assessment_id);
				}

				// String

				writeString(this.hospital_num, dos);

				// long

				dos.writeLong(this.state_id);

				// long

				dos.writeLong(this.lga_id);

				// long

				dos.writeLong(this.facility_id);

				// String

				writeString(this.facility_name, dos);

				// java.util.Date

				writeDate(this.date_visit, dos);

				// String

				writeString(this.referred_from, dos);

				// String

				writeString(this.testing_setting, dos);

				// String

				writeString(this.surname, dos);

				// String

				writeString(this.other_names, dos);

				// java.util.Date

				writeDate(this.date_birth, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.first_time_visit, dos);

				// String

				writeString(this.marital_status, dos);

				// Integer

				writeInteger(this.num_children, dos);

				// Integer

				writeInteger(this.num_wives, dos);

				// String

				writeString(this.type_counseling, dos);

				// String

				writeString(this.index_client, dos);

				// String

				writeString(this.type_index, dos);

				// String

				writeString(this.index_client_code, dos);

				// Integer

				writeInteger(this.knowledge_assessment1, dos);

				// Integer

				writeInteger(this.knowledge_assessment2, dos);

				// Integer

				writeInteger(this.knowledge_assessment3, dos);

				// Integer

				writeInteger(this.knowledge_assessment4, dos);

				// Integer

				writeInteger(this.knowledge_assessment5, dos);

				// Integer

				writeInteger(this.knowledge_assessment6, dos);

				// Integer

				writeInteger(this.knowledge_assessment7, dos);

				// Integer

				writeInteger(this.risk_assessment1, dos);

				// Integer

				writeInteger(this.risk_assessment2, dos);

				// Integer

				writeInteger(this.risk_assessment3, dos);

				// Integer

				writeInteger(this.risk_assessment4, dos);

				// Integer

				writeInteger(this.risk_assessment5, dos);

				// Integer

				writeInteger(this.risk_assessment6, dos);

				// Integer

				writeInteger(this.tb_screening1, dos);

				// Integer

				writeInteger(this.tb_screening2, dos);

				// Integer

				writeInteger(this.tb_screening3, dos);

				// Integer

				writeInteger(this.tb_screening4, dos);

				// Integer

				writeInteger(this.sti_screening1, dos);

				// Integer

				writeInteger(this.sti_screening2, dos);

				// Integer

				writeInteger(this.sti_screening3, dos);

				// Integer

				writeInteger(this.sti_screening4, dos);

				// Integer

				writeInteger(this.sti_screening5, dos);

				// String

				writeString(this.hiv_test_result, dos);

				// String

				writeString(this.tested_hiv, dos);

				// Integer

				writeInteger(this.post_test1, dos);

				// Integer

				writeInteger(this.post_test2, dos);

				// Integer

				writeInteger(this.post_test3, dos);

				// Integer

				writeInteger(this.post_test4, dos);

				// Integer

				writeInteger(this.post_test5, dos);

				// Integer

				writeInteger(this.post_test6, dos);

				// Integer

				writeInteger(this.post_test7, dos);

				// Integer

				writeInteger(this.post_test8, dos);

				// Integer

				writeInteger(this.post_test9, dos);

				// Integer

				writeInteger(this.post_test10, dos);

				// Integer

				writeInteger(this.post_test11, dos);

				// Integer

				writeInteger(this.post_test12, dos);

				// Integer

				writeInteger(this.post_test13, dos);

				// Integer

				writeInteger(this.post_test14, dos);

				// String

				writeString(this.syphilis_test_result, dos);

				// String

				writeString(this.hepatitisb_test_result, dos);

				// String

				writeString(this.hepatitisc_test_result, dos);

				// String

				writeString(this.sti_referred, dos);

				// String

				writeString(this.tb_referred, dos);

				// String

				writeString(this.art_referred, dos);

				// String

				writeString(this.partner_notification, dos);

				// String

				writeString(this.notification_counseling, dos);

				// Integer

				writeInteger(this.number_partner, dos);

				// java.util.Date

				writeDate(this.date_registration, dos);

				// java.util.Date

				writeDate(this.date_started, dos);

				// String

				writeString(this.note, dos);

				// Double

				if (this.longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.longitude);
				}

				// Double

				if (this.latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.latitude);
				}

				// java.util.Date

				writeDate(this.last_modified, dos);

				// Long

				if (this.deviceconfig_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.deviceconfig_id);
				}

				// Boolean

				if (this.archived == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.archived);
				}

				// String

				writeString(this.uuid, dos);

				// String

				writeString(this.extra, dos);

				// String

				writeString(this.cam_code, dos);

				// String

				writeString(this.patient_num, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("facilityname=" + facilityname);
			sb.append(",id=" + String.valueOf(id));
			sb.append(",client_code=" + client_code);
			sb.append(",assessment_id=" + String.valueOf(assessment_id));
			sb.append(",hospital_num=" + hospital_num);
			sb.append(",state_id=" + String.valueOf(state_id));
			sb.append(",lga_id=" + String.valueOf(lga_id));
			sb.append(",facility_id=" + String.valueOf(facility_id));
			sb.append(",facility_name=" + facility_name);
			sb.append(",date_visit=" + String.valueOf(date_visit));
			sb.append(",referred_from=" + referred_from);
			sb.append(",testing_setting=" + testing_setting);
			sb.append(",surname=" + surname);
			sb.append(",other_names=" + other_names);
			sb.append(",date_birth=" + String.valueOf(date_birth));
			sb.append(",phone=" + phone);
			sb.append(",address=" + address);
			sb.append(",gender=" + gender);
			sb.append(",first_time_visit=" + first_time_visit);
			sb.append(",marital_status=" + marital_status);
			sb.append(",num_children=" + String.valueOf(num_children));
			sb.append(",num_wives=" + String.valueOf(num_wives));
			sb.append(",type_counseling=" + type_counseling);
			sb.append(",index_client=" + index_client);
			sb.append(",type_index=" + type_index);
			sb.append(",index_client_code=" + index_client_code);
			sb.append(",knowledge_assessment1=" + String.valueOf(knowledge_assessment1));
			sb.append(",knowledge_assessment2=" + String.valueOf(knowledge_assessment2));
			sb.append(",knowledge_assessment3=" + String.valueOf(knowledge_assessment3));
			sb.append(",knowledge_assessment4=" + String.valueOf(knowledge_assessment4));
			sb.append(",knowledge_assessment5=" + String.valueOf(knowledge_assessment5));
			sb.append(",knowledge_assessment6=" + String.valueOf(knowledge_assessment6));
			sb.append(",knowledge_assessment7=" + String.valueOf(knowledge_assessment7));
			sb.append(",risk_assessment1=" + String.valueOf(risk_assessment1));
			sb.append(",risk_assessment2=" + String.valueOf(risk_assessment2));
			sb.append(",risk_assessment3=" + String.valueOf(risk_assessment3));
			sb.append(",risk_assessment4=" + String.valueOf(risk_assessment4));
			sb.append(",risk_assessment5=" + String.valueOf(risk_assessment5));
			sb.append(",risk_assessment6=" + String.valueOf(risk_assessment6));
			sb.append(",tb_screening1=" + String.valueOf(tb_screening1));
			sb.append(",tb_screening2=" + String.valueOf(tb_screening2));
			sb.append(",tb_screening3=" + String.valueOf(tb_screening3));
			sb.append(",tb_screening4=" + String.valueOf(tb_screening4));
			sb.append(",sti_screening1=" + String.valueOf(sti_screening1));
			sb.append(",sti_screening2=" + String.valueOf(sti_screening2));
			sb.append(",sti_screening3=" + String.valueOf(sti_screening3));
			sb.append(",sti_screening4=" + String.valueOf(sti_screening4));
			sb.append(",sti_screening5=" + String.valueOf(sti_screening5));
			sb.append(",hiv_test_result=" + hiv_test_result);
			sb.append(",tested_hiv=" + tested_hiv);
			sb.append(",post_test1=" + String.valueOf(post_test1));
			sb.append(",post_test2=" + String.valueOf(post_test2));
			sb.append(",post_test3=" + String.valueOf(post_test3));
			sb.append(",post_test4=" + String.valueOf(post_test4));
			sb.append(",post_test5=" + String.valueOf(post_test5));
			sb.append(",post_test6=" + String.valueOf(post_test6));
			sb.append(",post_test7=" + String.valueOf(post_test7));
			sb.append(",post_test8=" + String.valueOf(post_test8));
			sb.append(",post_test9=" + String.valueOf(post_test9));
			sb.append(",post_test10=" + String.valueOf(post_test10));
			sb.append(",post_test11=" + String.valueOf(post_test11));
			sb.append(",post_test12=" + String.valueOf(post_test12));
			sb.append(",post_test13=" + String.valueOf(post_test13));
			sb.append(",post_test14=" + String.valueOf(post_test14));
			sb.append(",syphilis_test_result=" + syphilis_test_result);
			sb.append(",hepatitisb_test_result=" + hepatitisb_test_result);
			sb.append(",hepatitisc_test_result=" + hepatitisc_test_result);
			sb.append(",sti_referred=" + sti_referred);
			sb.append(",tb_referred=" + tb_referred);
			sb.append(",art_referred=" + art_referred);
			sb.append(",partner_notification=" + partner_notification);
			sb.append(",notification_counseling=" + notification_counseling);
			sb.append(",number_partner=" + String.valueOf(number_partner));
			sb.append(",date_registration=" + String.valueOf(date_registration));
			sb.append(",date_started=" + String.valueOf(date_started));
			sb.append(",note=" + note);
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",last_modified=" + String.valueOf(last_modified));
			sb.append(",deviceconfig_id=" + String.valueOf(deviceconfig_id));
			sb.append(",archived=" + String.valueOf(archived));
			sb.append(",uuid=" + uuid);
			sb.append(",extra=" + extra);
			sb.append(",cam_code=" + cam_code);
			sb.append(",patient_num=" + patient_num);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_20Struct implements routines.system.IPersistableRow<after_tDBInput_20Struct> {
		final static byte[] commonByteArrayLock_LAMIS3_ETL_hts_migration = new byte[0];
		static byte[] commonByteArray_LAMIS3_ETL_hts_migration = new byte[0];

		public String facilityname;

		public String getFacilityname() {
			return this.facilityname;
		}

		public long id;

		public long getId() {
			return this.id;
		}

		public String client_code;

		public String getClient_code() {
			return this.client_code;
		}

		public Long assessment_id;

		public Long getAssessment_id() {
			return this.assessment_id;
		}

		public String hospital_num;

		public String getHospital_num() {
			return this.hospital_num;
		}

		public long state_id;

		public long getState_id() {
			return this.state_id;
		}

		public long lga_id;

		public long getLga_id() {
			return this.lga_id;
		}

		public long facility_id;

		public long getFacility_id() {
			return this.facility_id;
		}

		public String facility_name;

		public String getFacility_name() {
			return this.facility_name;
		}

		public java.util.Date date_visit;

		public java.util.Date getDate_visit() {
			return this.date_visit;
		}

		public String referred_from;

		public String getReferred_from() {
			return this.referred_from;
		}

		public String testing_setting;

		public String getTesting_setting() {
			return this.testing_setting;
		}

		public String surname;

		public String getSurname() {
			return this.surname;
		}

		public String other_names;

		public String getOther_names() {
			return this.other_names;
		}

		public java.util.Date date_birth;

		public java.util.Date getDate_birth() {
			return this.date_birth;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String address;

		public String getAddress() {
			return this.address;
		}

		public String gender;

		public String getGender() {
			return this.gender;
		}

		public String first_time_visit;

		public String getFirst_time_visit() {
			return this.first_time_visit;
		}

		public String marital_status;

		public String getMarital_status() {
			return this.marital_status;
		}

		public Integer num_children;

		public Integer getNum_children() {
			return this.num_children;
		}

		public Integer num_wives;

		public Integer getNum_wives() {
			return this.num_wives;
		}

		public String type_counseling;

		public String getType_counseling() {
			return this.type_counseling;
		}

		public String index_client;

		public String getIndex_client() {
			return this.index_client;
		}

		public String type_index;

		public String getType_index() {
			return this.type_index;
		}

		public String index_client_code;

		public String getIndex_client_code() {
			return this.index_client_code;
		}

		public Integer knowledge_assessment1;

		public Integer getKnowledge_assessment1() {
			return this.knowledge_assessment1;
		}

		public Integer knowledge_assessment2;

		public Integer getKnowledge_assessment2() {
			return this.knowledge_assessment2;
		}

		public Integer knowledge_assessment3;

		public Integer getKnowledge_assessment3() {
			return this.knowledge_assessment3;
		}

		public Integer knowledge_assessment4;

		public Integer getKnowledge_assessment4() {
			return this.knowledge_assessment4;
		}

		public Integer knowledge_assessment5;

		public Integer getKnowledge_assessment5() {
			return this.knowledge_assessment5;
		}

		public Integer knowledge_assessment6;

		public Integer getKnowledge_assessment6() {
			return this.knowledge_assessment6;
		}

		public Integer knowledge_assessment7;

		public Integer getKnowledge_assessment7() {
			return this.knowledge_assessment7;
		}

		public Integer risk_assessment1;

		public Integer getRisk_assessment1() {
			return this.risk_assessment1;
		}

		public Integer risk_assessment2;

		public Integer getRisk_assessment2() {
			return this.risk_assessment2;
		}

		public Integer risk_assessment3;

		public Integer getRisk_assessment3() {
			return this.risk_assessment3;
		}

		public Integer risk_assessment4;

		public Integer getRisk_assessment4() {
			return this.risk_assessment4;
		}

		public Integer risk_assessment5;

		public Integer getRisk_assessment5() {
			return this.risk_assessment5;
		}

		public Integer risk_assessment6;

		public Integer getRisk_assessment6() {
			return this.risk_assessment6;
		}

		public Integer tb_screening1;

		public Integer getTb_screening1() {
			return this.tb_screening1;
		}

		public Integer tb_screening2;

		public Integer getTb_screening2() {
			return this.tb_screening2;
		}

		public Integer tb_screening3;

		public Integer getTb_screening3() {
			return this.tb_screening3;
		}

		public Integer tb_screening4;

		public Integer getTb_screening4() {
			return this.tb_screening4;
		}

		public Integer sti_screening1;

		public Integer getSti_screening1() {
			return this.sti_screening1;
		}

		public Integer sti_screening2;

		public Integer getSti_screening2() {
			return this.sti_screening2;
		}

		public Integer sti_screening3;

		public Integer getSti_screening3() {
			return this.sti_screening3;
		}

		public Integer sti_screening4;

		public Integer getSti_screening4() {
			return this.sti_screening4;
		}

		public Integer sti_screening5;

		public Integer getSti_screening5() {
			return this.sti_screening5;
		}

		public String hiv_test_result;

		public String getHiv_test_result() {
			return this.hiv_test_result;
		}

		public String tested_hiv;

		public String getTested_hiv() {
			return this.tested_hiv;
		}

		public Integer post_test1;

		public Integer getPost_test1() {
			return this.post_test1;
		}

		public Integer post_test2;

		public Integer getPost_test2() {
			return this.post_test2;
		}

		public Integer post_test3;

		public Integer getPost_test3() {
			return this.post_test3;
		}

		public Integer post_test4;

		public Integer getPost_test4() {
			return this.post_test4;
		}

		public Integer post_test5;

		public Integer getPost_test5() {
			return this.post_test5;
		}

		public Integer post_test6;

		public Integer getPost_test6() {
			return this.post_test6;
		}

		public Integer post_test7;

		public Integer getPost_test7() {
			return this.post_test7;
		}

		public Integer post_test8;

		public Integer getPost_test8() {
			return this.post_test8;
		}

		public Integer post_test9;

		public Integer getPost_test9() {
			return this.post_test9;
		}

		public Integer post_test10;

		public Integer getPost_test10() {
			return this.post_test10;
		}

		public Integer post_test11;

		public Integer getPost_test11() {
			return this.post_test11;
		}

		public Integer post_test12;

		public Integer getPost_test12() {
			return this.post_test12;
		}

		public Integer post_test13;

		public Integer getPost_test13() {
			return this.post_test13;
		}

		public Integer post_test14;

		public Integer getPost_test14() {
			return this.post_test14;
		}

		public String syphilis_test_result;

		public String getSyphilis_test_result() {
			return this.syphilis_test_result;
		}

		public String hepatitisb_test_result;

		public String getHepatitisb_test_result() {
			return this.hepatitisb_test_result;
		}

		public String hepatitisc_test_result;

		public String getHepatitisc_test_result() {
			return this.hepatitisc_test_result;
		}

		public String sti_referred;

		public String getSti_referred() {
			return this.sti_referred;
		}

		public String tb_referred;

		public String getTb_referred() {
			return this.tb_referred;
		}

		public String art_referred;

		public String getArt_referred() {
			return this.art_referred;
		}

		public String partner_notification;

		public String getPartner_notification() {
			return this.partner_notification;
		}

		public String notification_counseling;

		public String getNotification_counseling() {
			return this.notification_counseling;
		}

		public Integer number_partner;

		public Integer getNumber_partner() {
			return this.number_partner;
		}

		public java.util.Date date_registration;

		public java.util.Date getDate_registration() {
			return this.date_registration;
		}

		public java.util.Date date_started;

		public java.util.Date getDate_started() {
			return this.date_started;
		}

		public String note;

		public String getNote() {
			return this.note;
		}

		public Double longitude;

		public Double getLongitude() {
			return this.longitude;
		}

		public Double latitude;

		public Double getLatitude() {
			return this.latitude;
		}

		public java.util.Date last_modified;

		public java.util.Date getLast_modified() {
			return this.last_modified;
		}

		public Long deviceconfig_id;

		public Long getDeviceconfig_id() {
			return this.deviceconfig_id;
		}

		public Boolean archived;

		public Boolean getArchived() {
			return this.archived;
		}

		public String uuid;

		public String getUuid() {
			return this.uuid;
		}

		public String extra;

		public String getExtra() {
			return this.extra;
		}

		public String cam_code;

		public String getCam_code() {
			return this.cam_code;
		}

		public String patient_num;

		public String getPatient_num() {
			return this.patient_num;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LAMIS3_ETL_hts_migration.length) {
					if (length < 1024 && commonByteArray_LAMIS3_ETL_hts_migration.length == 0) {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[1024];
					} else {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LAMIS3_ETL_hts_migration, 0, length);
				strReturn = new String(commonByteArray_LAMIS3_ETL_hts_migration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LAMIS3_ETL_hts_migration) {

				try {

					int length = 0;

					this.facilityname = readString(dis);

					this.id = dis.readLong();

					this.client_code = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.assessment_id = null;
					} else {
						this.assessment_id = dis.readLong();
					}

					this.hospital_num = readString(dis);

					this.state_id = dis.readLong();

					this.lga_id = dis.readLong();

					this.facility_id = dis.readLong();

					this.facility_name = readString(dis);

					this.date_visit = readDate(dis);

					this.referred_from = readString(dis);

					this.testing_setting = readString(dis);

					this.surname = readString(dis);

					this.other_names = readString(dis);

					this.date_birth = readDate(dis);

					this.phone = readString(dis);

					this.address = readString(dis);

					this.gender = readString(dis);

					this.first_time_visit = readString(dis);

					this.marital_status = readString(dis);

					this.num_children = readInteger(dis);

					this.num_wives = readInteger(dis);

					this.type_counseling = readString(dis);

					this.index_client = readString(dis);

					this.type_index = readString(dis);

					this.index_client_code = readString(dis);

					this.knowledge_assessment1 = readInteger(dis);

					this.knowledge_assessment2 = readInteger(dis);

					this.knowledge_assessment3 = readInteger(dis);

					this.knowledge_assessment4 = readInteger(dis);

					this.knowledge_assessment5 = readInteger(dis);

					this.knowledge_assessment6 = readInteger(dis);

					this.knowledge_assessment7 = readInteger(dis);

					this.risk_assessment1 = readInteger(dis);

					this.risk_assessment2 = readInteger(dis);

					this.risk_assessment3 = readInteger(dis);

					this.risk_assessment4 = readInteger(dis);

					this.risk_assessment5 = readInteger(dis);

					this.risk_assessment6 = readInteger(dis);

					this.tb_screening1 = readInteger(dis);

					this.tb_screening2 = readInteger(dis);

					this.tb_screening3 = readInteger(dis);

					this.tb_screening4 = readInteger(dis);

					this.sti_screening1 = readInteger(dis);

					this.sti_screening2 = readInteger(dis);

					this.sti_screening3 = readInteger(dis);

					this.sti_screening4 = readInteger(dis);

					this.sti_screening5 = readInteger(dis);

					this.hiv_test_result = readString(dis);

					this.tested_hiv = readString(dis);

					this.post_test1 = readInteger(dis);

					this.post_test2 = readInteger(dis);

					this.post_test3 = readInteger(dis);

					this.post_test4 = readInteger(dis);

					this.post_test5 = readInteger(dis);

					this.post_test6 = readInteger(dis);

					this.post_test7 = readInteger(dis);

					this.post_test8 = readInteger(dis);

					this.post_test9 = readInteger(dis);

					this.post_test10 = readInteger(dis);

					this.post_test11 = readInteger(dis);

					this.post_test12 = readInteger(dis);

					this.post_test13 = readInteger(dis);

					this.post_test14 = readInteger(dis);

					this.syphilis_test_result = readString(dis);

					this.hepatitisb_test_result = readString(dis);

					this.hepatitisc_test_result = readString(dis);

					this.sti_referred = readString(dis);

					this.tb_referred = readString(dis);

					this.art_referred = readString(dis);

					this.partner_notification = readString(dis);

					this.notification_counseling = readString(dis);

					this.number_partner = readInteger(dis);

					this.date_registration = readDate(dis);

					this.date_started = readDate(dis);

					this.note = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.longitude = null;
					} else {
						this.longitude = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.latitude = null;
					} else {
						this.latitude = dis.readDouble();
					}

					this.last_modified = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.deviceconfig_id = null;
					} else {
						this.deviceconfig_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.archived = null;
					} else {
						this.archived = dis.readBoolean();
					}

					this.uuid = readString(dis);

					this.extra = readString(dis);

					this.cam_code = readString(dis);

					this.patient_num = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.facilityname, dos);

				// long

				dos.writeLong(this.id);

				// String

				writeString(this.client_code, dos);

				// Long

				if (this.assessment_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.assessment_id);
				}

				// String

				writeString(this.hospital_num, dos);

				// long

				dos.writeLong(this.state_id);

				// long

				dos.writeLong(this.lga_id);

				// long

				dos.writeLong(this.facility_id);

				// String

				writeString(this.facility_name, dos);

				// java.util.Date

				writeDate(this.date_visit, dos);

				// String

				writeString(this.referred_from, dos);

				// String

				writeString(this.testing_setting, dos);

				// String

				writeString(this.surname, dos);

				// String

				writeString(this.other_names, dos);

				// java.util.Date

				writeDate(this.date_birth, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.address, dos);

				// String

				writeString(this.gender, dos);

				// String

				writeString(this.first_time_visit, dos);

				// String

				writeString(this.marital_status, dos);

				// Integer

				writeInteger(this.num_children, dos);

				// Integer

				writeInteger(this.num_wives, dos);

				// String

				writeString(this.type_counseling, dos);

				// String

				writeString(this.index_client, dos);

				// String

				writeString(this.type_index, dos);

				// String

				writeString(this.index_client_code, dos);

				// Integer

				writeInteger(this.knowledge_assessment1, dos);

				// Integer

				writeInteger(this.knowledge_assessment2, dos);

				// Integer

				writeInteger(this.knowledge_assessment3, dos);

				// Integer

				writeInteger(this.knowledge_assessment4, dos);

				// Integer

				writeInteger(this.knowledge_assessment5, dos);

				// Integer

				writeInteger(this.knowledge_assessment6, dos);

				// Integer

				writeInteger(this.knowledge_assessment7, dos);

				// Integer

				writeInteger(this.risk_assessment1, dos);

				// Integer

				writeInteger(this.risk_assessment2, dos);

				// Integer

				writeInteger(this.risk_assessment3, dos);

				// Integer

				writeInteger(this.risk_assessment4, dos);

				// Integer

				writeInteger(this.risk_assessment5, dos);

				// Integer

				writeInteger(this.risk_assessment6, dos);

				// Integer

				writeInteger(this.tb_screening1, dos);

				// Integer

				writeInteger(this.tb_screening2, dos);

				// Integer

				writeInteger(this.tb_screening3, dos);

				// Integer

				writeInteger(this.tb_screening4, dos);

				// Integer

				writeInteger(this.sti_screening1, dos);

				// Integer

				writeInteger(this.sti_screening2, dos);

				// Integer

				writeInteger(this.sti_screening3, dos);

				// Integer

				writeInteger(this.sti_screening4, dos);

				// Integer

				writeInteger(this.sti_screening5, dos);

				// String

				writeString(this.hiv_test_result, dos);

				// String

				writeString(this.tested_hiv, dos);

				// Integer

				writeInteger(this.post_test1, dos);

				// Integer

				writeInteger(this.post_test2, dos);

				// Integer

				writeInteger(this.post_test3, dos);

				// Integer

				writeInteger(this.post_test4, dos);

				// Integer

				writeInteger(this.post_test5, dos);

				// Integer

				writeInteger(this.post_test6, dos);

				// Integer

				writeInteger(this.post_test7, dos);

				// Integer

				writeInteger(this.post_test8, dos);

				// Integer

				writeInteger(this.post_test9, dos);

				// Integer

				writeInteger(this.post_test10, dos);

				// Integer

				writeInteger(this.post_test11, dos);

				// Integer

				writeInteger(this.post_test12, dos);

				// Integer

				writeInteger(this.post_test13, dos);

				// Integer

				writeInteger(this.post_test14, dos);

				// String

				writeString(this.syphilis_test_result, dos);

				// String

				writeString(this.hepatitisb_test_result, dos);

				// String

				writeString(this.hepatitisc_test_result, dos);

				// String

				writeString(this.sti_referred, dos);

				// String

				writeString(this.tb_referred, dos);

				// String

				writeString(this.art_referred, dos);

				// String

				writeString(this.partner_notification, dos);

				// String

				writeString(this.notification_counseling, dos);

				// Integer

				writeInteger(this.number_partner, dos);

				// java.util.Date

				writeDate(this.date_registration, dos);

				// java.util.Date

				writeDate(this.date_started, dos);

				// String

				writeString(this.note, dos);

				// Double

				if (this.longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.longitude);
				}

				// Double

				if (this.latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.latitude);
				}

				// java.util.Date

				writeDate(this.last_modified, dos);

				// Long

				if (this.deviceconfig_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.deviceconfig_id);
				}

				// Boolean

				if (this.archived == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.archived);
				}

				// String

				writeString(this.uuid, dos);

				// String

				writeString(this.extra, dos);

				// String

				writeString(this.cam_code, dos);

				// String

				writeString(this.patient_num, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("facilityname=" + facilityname);
			sb.append(",id=" + String.valueOf(id));
			sb.append(",client_code=" + client_code);
			sb.append(",assessment_id=" + String.valueOf(assessment_id));
			sb.append(",hospital_num=" + hospital_num);
			sb.append(",state_id=" + String.valueOf(state_id));
			sb.append(",lga_id=" + String.valueOf(lga_id));
			sb.append(",facility_id=" + String.valueOf(facility_id));
			sb.append(",facility_name=" + facility_name);
			sb.append(",date_visit=" + String.valueOf(date_visit));
			sb.append(",referred_from=" + referred_from);
			sb.append(",testing_setting=" + testing_setting);
			sb.append(",surname=" + surname);
			sb.append(",other_names=" + other_names);
			sb.append(",date_birth=" + String.valueOf(date_birth));
			sb.append(",phone=" + phone);
			sb.append(",address=" + address);
			sb.append(",gender=" + gender);
			sb.append(",first_time_visit=" + first_time_visit);
			sb.append(",marital_status=" + marital_status);
			sb.append(",num_children=" + String.valueOf(num_children));
			sb.append(",num_wives=" + String.valueOf(num_wives));
			sb.append(",type_counseling=" + type_counseling);
			sb.append(",index_client=" + index_client);
			sb.append(",type_index=" + type_index);
			sb.append(",index_client_code=" + index_client_code);
			sb.append(",knowledge_assessment1=" + String.valueOf(knowledge_assessment1));
			sb.append(",knowledge_assessment2=" + String.valueOf(knowledge_assessment2));
			sb.append(",knowledge_assessment3=" + String.valueOf(knowledge_assessment3));
			sb.append(",knowledge_assessment4=" + String.valueOf(knowledge_assessment4));
			sb.append(",knowledge_assessment5=" + String.valueOf(knowledge_assessment5));
			sb.append(",knowledge_assessment6=" + String.valueOf(knowledge_assessment6));
			sb.append(",knowledge_assessment7=" + String.valueOf(knowledge_assessment7));
			sb.append(",risk_assessment1=" + String.valueOf(risk_assessment1));
			sb.append(",risk_assessment2=" + String.valueOf(risk_assessment2));
			sb.append(",risk_assessment3=" + String.valueOf(risk_assessment3));
			sb.append(",risk_assessment4=" + String.valueOf(risk_assessment4));
			sb.append(",risk_assessment5=" + String.valueOf(risk_assessment5));
			sb.append(",risk_assessment6=" + String.valueOf(risk_assessment6));
			sb.append(",tb_screening1=" + String.valueOf(tb_screening1));
			sb.append(",tb_screening2=" + String.valueOf(tb_screening2));
			sb.append(",tb_screening3=" + String.valueOf(tb_screening3));
			sb.append(",tb_screening4=" + String.valueOf(tb_screening4));
			sb.append(",sti_screening1=" + String.valueOf(sti_screening1));
			sb.append(",sti_screening2=" + String.valueOf(sti_screening2));
			sb.append(",sti_screening3=" + String.valueOf(sti_screening3));
			sb.append(",sti_screening4=" + String.valueOf(sti_screening4));
			sb.append(",sti_screening5=" + String.valueOf(sti_screening5));
			sb.append(",hiv_test_result=" + hiv_test_result);
			sb.append(",tested_hiv=" + tested_hiv);
			sb.append(",post_test1=" + String.valueOf(post_test1));
			sb.append(",post_test2=" + String.valueOf(post_test2));
			sb.append(",post_test3=" + String.valueOf(post_test3));
			sb.append(",post_test4=" + String.valueOf(post_test4));
			sb.append(",post_test5=" + String.valueOf(post_test5));
			sb.append(",post_test6=" + String.valueOf(post_test6));
			sb.append(",post_test7=" + String.valueOf(post_test7));
			sb.append(",post_test8=" + String.valueOf(post_test8));
			sb.append(",post_test9=" + String.valueOf(post_test9));
			sb.append(",post_test10=" + String.valueOf(post_test10));
			sb.append(",post_test11=" + String.valueOf(post_test11));
			sb.append(",post_test12=" + String.valueOf(post_test12));
			sb.append(",post_test13=" + String.valueOf(post_test13));
			sb.append(",post_test14=" + String.valueOf(post_test14));
			sb.append(",syphilis_test_result=" + syphilis_test_result);
			sb.append(",hepatitisb_test_result=" + hepatitisb_test_result);
			sb.append(",hepatitisc_test_result=" + hepatitisc_test_result);
			sb.append(",sti_referred=" + sti_referred);
			sb.append(",tb_referred=" + tb_referred);
			sb.append(",art_referred=" + art_referred);
			sb.append(",partner_notification=" + partner_notification);
			sb.append(",notification_counseling=" + notification_counseling);
			sb.append(",number_partner=" + String.valueOf(number_partner));
			sb.append(",date_registration=" + String.valueOf(date_registration));
			sb.append(",date_started=" + String.valueOf(date_started));
			sb.append(",note=" + note);
			sb.append(",longitude=" + String.valueOf(longitude));
			sb.append(",latitude=" + String.valueOf(latitude));
			sb.append(",last_modified=" + String.valueOf(last_modified));
			sb.append(",deviceconfig_id=" + String.valueOf(deviceconfig_id));
			sb.append(",archived=" + String.valueOf(archived));
			sb.append(",uuid=" + uuid);
			sb.append(",extra=" + extra);
			sb.append(",cam_code=" + cam_code);
			sb.append(",patient_num=" + patient_num);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_21Process(globalMap);
				tDBInput_22Process(globalMap);
				tDBInput_23Process(globalMap);
				tDBInput_24Process(globalMap);

				row22Struct row22 = new row22Struct();
				to_createStruct to_create = new to_createStruct();
				row27Struct row27 = new row27Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tDBOutput_7 = 0;

				String dbschema_tDBOutput_7 = null;
				dbschema_tDBOutput_7 = context.LAMISPlus_Schema;

				String tableName_tDBOutput_7 = null;
				if (dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = ("patient");
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "\".\"" + ("patient");
				}

				int updateKeyCount_tDBOutput_7 = 1;
				if (updateKeyCount_tDBOutput_7 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}
				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbUser_tDBOutput_7 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_7 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port
						+ "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;
				dbUser_tDBOutput_7 = context.LAMISPlus_Login;

				final String decryptedPassword_tDBOutput_7 = context.LAMISPlus_Password;

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7, dbUser_tDBOutput_7,
						dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;
				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(
						"SELECT COUNT(1) FROM \"" + tableName_tDBOutput_7 + "\" WHERE \"patient_number\" = ?");
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);
				String insert_tDBOutput_7 = "INSERT INTO \"" + tableName_tDBOutput_7 + "\" (\"" + "date_created"
						+ "\",\"patient_number\",\"" + "details"
						+ "\",\"uuid\",\"archived\",\"created_by\",\"date_modified\",\"organisation_unit_id\") VALUES ("
						+ "now()" + ",?," + "?::jsonb" + ",?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmtInsert_tDBOutput_7", pstmtInsert_tDBOutput_7);
				String update_tDBOutput_7 = "UPDATE \"" + tableName_tDBOutput_7 + "\" SET \"" + "date_created" + "\" = "
						+ "now()" + ",\"patient_number\" = ?,\"" + "details" + "\" = " + "?::jsonb"
						+ ",\"uuid\" = ?,\"archived\" = ?,\"created_by\" = ?,\"date_modified\" = ?,\"organisation_unit_id\" = ? WHERE \"patient_number\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(update_tDBOutput_7);
				resourceMap.put("pstmtUpdate_tDBOutput_7", pstmtUpdate_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "to_create");
				}

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) globalMap
						.get("tHash_Lookup_row23"));

				row23Struct row23HashKey = new row23Struct();
				row23Struct row23Default = new row23Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
						.get("tHash_Lookup_row24"));

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) globalMap
						.get("tHash_Lookup_row25"));

				tHash_Lookup_row25.initGet();

				row25Struct row25HashKey = new row25Struct();
				row25Struct row25Default = new row25Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) globalMap
						.get("tHash_Lookup_row26"));

				tHash_Lookup_row26.initGet();

				row26Struct row26HashKey = new row26Struct();
				row26Struct row26Default = new row26Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				to_createStruct to_create_tmp = new to_createStruct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tDBInput_20 begin ] start
				 */

				ok_Hash.put("tDBInput_20", false);
				start_Hash.put("tDBInput_20", System.currentTimeMillis());

				currentComponent = "tDBInput_20";

				int tos_count_tDBInput_20 = 0;

				int nb_line_tDBInput_20 = 0;
				java.sql.Connection conn_tDBInput_20 = null;
				String driverClass_tDBInput_20 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_20 = java.lang.Class.forName(driverClass_tDBInput_20);
				String dbUser_tDBInput_20 = context.LAMIS3_Login;

				final String decryptedPassword_tDBInput_20 = context.LAMIS3_Password;

				String dbPwd_tDBInput_20 = decryptedPassword_tDBInput_20;

				String url_tDBInput_20 = "jdbc:postgresql://" + context.LAMIS3_Server + ":" + context.LAMIS3_Port + "/"
						+ context.LAMIS3_Database + "?" + context.LAMIS3_AdditionalParams;

				conn_tDBInput_20 = java.sql.DriverManager.getConnection(url_tDBInput_20, dbUser_tDBInput_20,
						dbPwd_tDBInput_20);

				conn_tDBInput_20.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_20 = conn_tDBInput_20.createStatement();

				String dbquery_tDBInput_20 = "SELECT upper(f.name) as facilityName, h.*, p.hospital_num as patient_num FROM public.hts h left join patient p on h.id "
						+ "= p.hts_id\ninner join facility f on h.facility_id = f.id";

				globalMap.put("tDBInput_20_QUERY", dbquery_tDBInput_20);
				java.sql.ResultSet rs_tDBInput_20 = null;

				try {
					rs_tDBInput_20 = stmt_tDBInput_20.executeQuery(dbquery_tDBInput_20);
					java.sql.ResultSetMetaData rsmd_tDBInput_20 = rs_tDBInput_20.getMetaData();
					int colQtyInRs_tDBInput_20 = rsmd_tDBInput_20.getColumnCount();

					String tmpContent_tDBInput_20 = null;

					while (rs_tDBInput_20.next()) {
						nb_line_tDBInput_20++;

						if (colQtyInRs_tDBInput_20 < 1) {
							row22.facilityname = null;
						} else {

							row22.facilityname = routines.system.JDBCUtil.getString(rs_tDBInput_20, 1, false);
						}
						if (colQtyInRs_tDBInput_20 < 2) {
							row22.id = 0;
						} else {

							row22.id = rs_tDBInput_20.getLong(2);
							if (rs_tDBInput_20.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_20 < 3) {
							row22.client_code = null;
						} else {

							row22.client_code = routines.system.JDBCUtil.getString(rs_tDBInput_20, 3, false);
						}
						if (colQtyInRs_tDBInput_20 < 4) {
							row22.assessment_id = null;
						} else {

							row22.assessment_id = rs_tDBInput_20.getLong(4);
							if (rs_tDBInput_20.wasNull()) {
								row22.assessment_id = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 5) {
							row22.hospital_num = null;
						} else {

							row22.hospital_num = routines.system.JDBCUtil.getString(rs_tDBInput_20, 5, false);
						}
						if (colQtyInRs_tDBInput_20 < 6) {
							row22.state_id = 0;
						} else {

							row22.state_id = rs_tDBInput_20.getLong(6);
							if (rs_tDBInput_20.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_20 < 7) {
							row22.lga_id = 0;
						} else {

							row22.lga_id = rs_tDBInput_20.getLong(7);
							if (rs_tDBInput_20.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_20 < 8) {
							row22.facility_id = 0;
						} else {

							row22.facility_id = rs_tDBInput_20.getLong(8);
							if (rs_tDBInput_20.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_20 < 9) {
							row22.facility_name = null;
						} else {

							row22.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_20, 9, false);
						}
						if (colQtyInRs_tDBInput_20 < 10) {
							row22.date_visit = null;
						} else {

							row22.date_visit = routines.system.JDBCUtil.getDate(rs_tDBInput_20, 10);
						}
						if (colQtyInRs_tDBInput_20 < 11) {
							row22.referred_from = null;
						} else {

							row22.referred_from = routines.system.JDBCUtil.getString(rs_tDBInput_20, 11, false);
						}
						if (colQtyInRs_tDBInput_20 < 12) {
							row22.testing_setting = null;
						} else {

							row22.testing_setting = routines.system.JDBCUtil.getString(rs_tDBInput_20, 12, false);
						}
						if (colQtyInRs_tDBInput_20 < 13) {
							row22.surname = null;
						} else {

							row22.surname = routines.system.JDBCUtil.getString(rs_tDBInput_20, 13, false);
						}
						if (colQtyInRs_tDBInput_20 < 14) {
							row22.other_names = null;
						} else {

							row22.other_names = routines.system.JDBCUtil.getString(rs_tDBInput_20, 14, false);
						}
						if (colQtyInRs_tDBInput_20 < 15) {
							row22.date_birth = null;
						} else {

							row22.date_birth = routines.system.JDBCUtil.getDate(rs_tDBInput_20, 15);
						}
						if (colQtyInRs_tDBInput_20 < 16) {
							row22.phone = null;
						} else {

							row22.phone = routines.system.JDBCUtil.getString(rs_tDBInput_20, 16, false);
						}
						if (colQtyInRs_tDBInput_20 < 17) {
							row22.address = null;
						} else {

							row22.address = routines.system.JDBCUtil.getString(rs_tDBInput_20, 17, false);
						}
						if (colQtyInRs_tDBInput_20 < 18) {
							row22.gender = null;
						} else {

							row22.gender = routines.system.JDBCUtil.getString(rs_tDBInput_20, 18, false);
						}
						if (colQtyInRs_tDBInput_20 < 19) {
							row22.first_time_visit = null;
						} else {

							row22.first_time_visit = routines.system.JDBCUtil.getString(rs_tDBInput_20, 19, false);
						}
						if (colQtyInRs_tDBInput_20 < 20) {
							row22.marital_status = null;
						} else {

							row22.marital_status = routines.system.JDBCUtil.getString(rs_tDBInput_20, 20, false);
						}
						if (colQtyInRs_tDBInput_20 < 21) {
							row22.num_children = null;
						} else {

							row22.num_children = rs_tDBInput_20.getInt(21);
							if (rs_tDBInput_20.wasNull()) {
								row22.num_children = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 22) {
							row22.num_wives = null;
						} else {

							row22.num_wives = rs_tDBInput_20.getInt(22);
							if (rs_tDBInput_20.wasNull()) {
								row22.num_wives = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 23) {
							row22.type_counseling = null;
						} else {

							row22.type_counseling = routines.system.JDBCUtil.getString(rs_tDBInput_20, 23, false);
						}
						if (colQtyInRs_tDBInput_20 < 24) {
							row22.index_client = null;
						} else {

							row22.index_client = routines.system.JDBCUtil.getString(rs_tDBInput_20, 24, false);
						}
						if (colQtyInRs_tDBInput_20 < 25) {
							row22.type_index = null;
						} else {

							row22.type_index = routines.system.JDBCUtil.getString(rs_tDBInput_20, 25, false);
						}
						if (colQtyInRs_tDBInput_20 < 26) {
							row22.index_client_code = null;
						} else {

							row22.index_client_code = routines.system.JDBCUtil.getString(rs_tDBInput_20, 26, false);
						}
						if (colQtyInRs_tDBInput_20 < 27) {
							row22.knowledge_assessment1 = null;
						} else {

							row22.knowledge_assessment1 = rs_tDBInput_20.getInt(27);
							if (rs_tDBInput_20.wasNull()) {
								row22.knowledge_assessment1 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 28) {
							row22.knowledge_assessment2 = null;
						} else {

							row22.knowledge_assessment2 = rs_tDBInput_20.getInt(28);
							if (rs_tDBInput_20.wasNull()) {
								row22.knowledge_assessment2 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 29) {
							row22.knowledge_assessment3 = null;
						} else {

							row22.knowledge_assessment3 = rs_tDBInput_20.getInt(29);
							if (rs_tDBInput_20.wasNull()) {
								row22.knowledge_assessment3 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 30) {
							row22.knowledge_assessment4 = null;
						} else {

							row22.knowledge_assessment4 = rs_tDBInput_20.getInt(30);
							if (rs_tDBInput_20.wasNull()) {
								row22.knowledge_assessment4 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 31) {
							row22.knowledge_assessment5 = null;
						} else {

							row22.knowledge_assessment5 = rs_tDBInput_20.getInt(31);
							if (rs_tDBInput_20.wasNull()) {
								row22.knowledge_assessment5 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 32) {
							row22.knowledge_assessment6 = null;
						} else {

							row22.knowledge_assessment6 = rs_tDBInput_20.getInt(32);
							if (rs_tDBInput_20.wasNull()) {
								row22.knowledge_assessment6 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 33) {
							row22.knowledge_assessment7 = null;
						} else {

							row22.knowledge_assessment7 = rs_tDBInput_20.getInt(33);
							if (rs_tDBInput_20.wasNull()) {
								row22.knowledge_assessment7 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 34) {
							row22.risk_assessment1 = null;
						} else {

							row22.risk_assessment1 = rs_tDBInput_20.getInt(34);
							if (rs_tDBInput_20.wasNull()) {
								row22.risk_assessment1 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 35) {
							row22.risk_assessment2 = null;
						} else {

							row22.risk_assessment2 = rs_tDBInput_20.getInt(35);
							if (rs_tDBInput_20.wasNull()) {
								row22.risk_assessment2 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 36) {
							row22.risk_assessment3 = null;
						} else {

							row22.risk_assessment3 = rs_tDBInput_20.getInt(36);
							if (rs_tDBInput_20.wasNull()) {
								row22.risk_assessment3 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 37) {
							row22.risk_assessment4 = null;
						} else {

							row22.risk_assessment4 = rs_tDBInput_20.getInt(37);
							if (rs_tDBInput_20.wasNull()) {
								row22.risk_assessment4 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 38) {
							row22.risk_assessment5 = null;
						} else {

							row22.risk_assessment5 = rs_tDBInput_20.getInt(38);
							if (rs_tDBInput_20.wasNull()) {
								row22.risk_assessment5 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 39) {
							row22.risk_assessment6 = null;
						} else {

							row22.risk_assessment6 = rs_tDBInput_20.getInt(39);
							if (rs_tDBInput_20.wasNull()) {
								row22.risk_assessment6 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 40) {
							row22.tb_screening1 = null;
						} else {

							row22.tb_screening1 = rs_tDBInput_20.getInt(40);
							if (rs_tDBInput_20.wasNull()) {
								row22.tb_screening1 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 41) {
							row22.tb_screening2 = null;
						} else {

							row22.tb_screening2 = rs_tDBInput_20.getInt(41);
							if (rs_tDBInput_20.wasNull()) {
								row22.tb_screening2 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 42) {
							row22.tb_screening3 = null;
						} else {

							row22.tb_screening3 = rs_tDBInput_20.getInt(42);
							if (rs_tDBInput_20.wasNull()) {
								row22.tb_screening3 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 43) {
							row22.tb_screening4 = null;
						} else {

							row22.tb_screening4 = rs_tDBInput_20.getInt(43);
							if (rs_tDBInput_20.wasNull()) {
								row22.tb_screening4 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 44) {
							row22.sti_screening1 = null;
						} else {

							row22.sti_screening1 = rs_tDBInput_20.getInt(44);
							if (rs_tDBInput_20.wasNull()) {
								row22.sti_screening1 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 45) {
							row22.sti_screening2 = null;
						} else {

							row22.sti_screening2 = rs_tDBInput_20.getInt(45);
							if (rs_tDBInput_20.wasNull()) {
								row22.sti_screening2 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 46) {
							row22.sti_screening3 = null;
						} else {

							row22.sti_screening3 = rs_tDBInput_20.getInt(46);
							if (rs_tDBInput_20.wasNull()) {
								row22.sti_screening3 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 47) {
							row22.sti_screening4 = null;
						} else {

							row22.sti_screening4 = rs_tDBInput_20.getInt(47);
							if (rs_tDBInput_20.wasNull()) {
								row22.sti_screening4 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 48) {
							row22.sti_screening5 = null;
						} else {

							row22.sti_screening5 = rs_tDBInput_20.getInt(48);
							if (rs_tDBInput_20.wasNull()) {
								row22.sti_screening5 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 49) {
							row22.hiv_test_result = null;
						} else {

							row22.hiv_test_result = routines.system.JDBCUtil.getString(rs_tDBInput_20, 49, false);
						}
						if (colQtyInRs_tDBInput_20 < 50) {
							row22.tested_hiv = null;
						} else {

							row22.tested_hiv = routines.system.JDBCUtil.getString(rs_tDBInput_20, 50, false);
						}
						if (colQtyInRs_tDBInput_20 < 51) {
							row22.post_test1 = null;
						} else {

							row22.post_test1 = rs_tDBInput_20.getInt(51);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test1 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 52) {
							row22.post_test2 = null;
						} else {

							row22.post_test2 = rs_tDBInput_20.getInt(52);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test2 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 53) {
							row22.post_test3 = null;
						} else {

							row22.post_test3 = rs_tDBInput_20.getInt(53);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test3 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 54) {
							row22.post_test4 = null;
						} else {

							row22.post_test4 = rs_tDBInput_20.getInt(54);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test4 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 55) {
							row22.post_test5 = null;
						} else {

							row22.post_test5 = rs_tDBInput_20.getInt(55);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test5 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 56) {
							row22.post_test6 = null;
						} else {

							row22.post_test6 = rs_tDBInput_20.getInt(56);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test6 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 57) {
							row22.post_test7 = null;
						} else {

							row22.post_test7 = rs_tDBInput_20.getInt(57);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test7 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 58) {
							row22.post_test8 = null;
						} else {

							row22.post_test8 = rs_tDBInput_20.getInt(58);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test8 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 59) {
							row22.post_test9 = null;
						} else {

							row22.post_test9 = rs_tDBInput_20.getInt(59);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test9 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 60) {
							row22.post_test10 = null;
						} else {

							row22.post_test10 = rs_tDBInput_20.getInt(60);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test10 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 61) {
							row22.post_test11 = null;
						} else {

							row22.post_test11 = rs_tDBInput_20.getInt(61);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test11 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 62) {
							row22.post_test12 = null;
						} else {

							row22.post_test12 = rs_tDBInput_20.getInt(62);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test12 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 63) {
							row22.post_test13 = null;
						} else {

							row22.post_test13 = rs_tDBInput_20.getInt(63);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test13 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 64) {
							row22.post_test14 = null;
						} else {

							row22.post_test14 = rs_tDBInput_20.getInt(64);
							if (rs_tDBInput_20.wasNull()) {
								row22.post_test14 = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 65) {
							row22.syphilis_test_result = null;
						} else {

							row22.syphilis_test_result = routines.system.JDBCUtil.getString(rs_tDBInput_20, 65, false);
						}
						if (colQtyInRs_tDBInput_20 < 66) {
							row22.hepatitisb_test_result = null;
						} else {

							row22.hepatitisb_test_result = routines.system.JDBCUtil.getString(rs_tDBInput_20, 66,
									false);
						}
						if (colQtyInRs_tDBInput_20 < 67) {
							row22.hepatitisc_test_result = null;
						} else {

							row22.hepatitisc_test_result = routines.system.JDBCUtil.getString(rs_tDBInput_20, 67,
									false);
						}
						if (colQtyInRs_tDBInput_20 < 68) {
							row22.sti_referred = null;
						} else {

							row22.sti_referred = routines.system.JDBCUtil.getString(rs_tDBInput_20, 68, false);
						}
						if (colQtyInRs_tDBInput_20 < 69) {
							row22.tb_referred = null;
						} else {

							row22.tb_referred = routines.system.JDBCUtil.getString(rs_tDBInput_20, 69, false);
						}
						if (colQtyInRs_tDBInput_20 < 70) {
							row22.art_referred = null;
						} else {

							row22.art_referred = routines.system.JDBCUtil.getString(rs_tDBInput_20, 70, false);
						}
						if (colQtyInRs_tDBInput_20 < 71) {
							row22.partner_notification = null;
						} else {

							row22.partner_notification = routines.system.JDBCUtil.getString(rs_tDBInput_20, 71, false);
						}
						if (colQtyInRs_tDBInput_20 < 72) {
							row22.notification_counseling = null;
						} else {

							row22.notification_counseling = routines.system.JDBCUtil.getString(rs_tDBInput_20, 72,
									false);
						}
						if (colQtyInRs_tDBInput_20 < 73) {
							row22.number_partner = null;
						} else {

							row22.number_partner = rs_tDBInput_20.getInt(73);
							if (rs_tDBInput_20.wasNull()) {
								row22.number_partner = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 74) {
							row22.date_registration = null;
						} else {

							row22.date_registration = routines.system.JDBCUtil.getDate(rs_tDBInput_20, 74);
						}
						if (colQtyInRs_tDBInput_20 < 75) {
							row22.date_started = null;
						} else {

							row22.date_started = routines.system.JDBCUtil.getDate(rs_tDBInput_20, 75);
						}
						if (colQtyInRs_tDBInput_20 < 76) {
							row22.note = null;
						} else {

							row22.note = routines.system.JDBCUtil.getString(rs_tDBInput_20, 76, false);
						}
						if (colQtyInRs_tDBInput_20 < 77) {
							row22.longitude = null;
						} else {

							row22.longitude = rs_tDBInput_20.getDouble(77);
							if (rs_tDBInput_20.wasNull()) {
								row22.longitude = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 78) {
							row22.latitude = null;
						} else {

							row22.latitude = rs_tDBInput_20.getDouble(78);
							if (rs_tDBInput_20.wasNull()) {
								row22.latitude = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 79) {
							row22.last_modified = null;
						} else {

							row22.last_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_20, 79);
						}
						if (colQtyInRs_tDBInput_20 < 80) {
							row22.deviceconfig_id = null;
						} else {

							row22.deviceconfig_id = rs_tDBInput_20.getLong(80);
							if (rs_tDBInput_20.wasNull()) {
								row22.deviceconfig_id = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 81) {
							row22.archived = null;
						} else {

							row22.archived = rs_tDBInput_20.getBoolean(81);
							if (rs_tDBInput_20.wasNull()) {
								row22.archived = null;
							}
						}
						if (colQtyInRs_tDBInput_20 < 82) {
							row22.uuid = null;
						} else {

							row22.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_20, 82, false);
						}
						if (colQtyInRs_tDBInput_20 < 83) {
							row22.extra = null;
						} else {

							row22.extra = routines.system.JDBCUtil.getString(rs_tDBInput_20, 83, false);
						}
						if (colQtyInRs_tDBInput_20 < 84) {
							row22.cam_code = null;
						} else {

							row22.cam_code = routines.system.JDBCUtil.getString(rs_tDBInput_20, 84, false);
						}
						if (colQtyInRs_tDBInput_20 < 85) {
							row22.patient_num = null;
						} else {

							row22.patient_num = routines.system.JDBCUtil.getString(rs_tDBInput_20, 85, false);
						}

						/**
						 * [tDBInput_20 begin ] stop
						 */

						/**
						 * [tDBInput_20 main ] start
						 */

						currentComponent = "tDBInput_20";

						tos_count_tDBInput_20++;

						/**
						 * [tDBInput_20 main ] stop
						 */

						/**
						 * [tDBInput_20 process_data_begin ] start
						 */

						currentComponent = "tDBInput_20";

						/**
						 * [tDBInput_20 process_data_begin ] stop
						 */

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row22");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row23"
						///////////////////////////////////////////////

						boolean forceLooprow23 = false;

						row23Struct row23ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_7 = false;

							row23HashKey.patient_number = row22.patient_num;

							row23HashKey.hashCodeDirty = true;

							tHash_Lookup_row23.lookup(row23HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row23' and it contains more one result from keys : row23.patient_number = '"
							// + row23HashKey.patient_number + "'");
						} // G 071

						row23Struct row23 = null;

						row23Struct fromLookup_row23 = null;
						row23 = row23Default;

						if (tHash_Lookup_row23 != null && tHash_Lookup_row23.hasNext()) { // G 099

							fromLookup_row23 = tHash_Lookup_row23.next();

						} // G 099

						if (fromLookup_row23 != null) {
							row23 = fromLookup_row23;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row24"
						///////////////////////////////////////////////

						boolean forceLooprow24 = false;

						row24Struct row24ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_7 = false;

							row24HashKey.facility_name = row22.facilityname;

							row24HashKey.hashCodeDirty = true;

							tHash_Lookup_row24.lookup(row24HashKey);

							if (!tHash_Lookup_row24.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_7 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row24 != null && tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row24' and it contains more one result from keys : row24.facility_name = '"
							// + row24HashKey.facility_name + "'");
						} // G 071

						row24Struct row24 = null;

						row24Struct fromLookup_row24 = null;
						row24 = row24Default;

						if (tHash_Lookup_row24 != null && tHash_Lookup_row24.hasNext()) { // G 099

							fromLookup_row24 = tHash_Lookup_row24.next();

						} // G 099

						if (fromLookup_row24 != null) {
							row24 = fromLookup_row24;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row25"
						///////////////////////////////////////////////

						boolean forceLooprow25 = false;

						row25Struct row25ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							tHash_Lookup_row25.lookup(row25HashKey);

							if (!tHash_Lookup_row25.hasNext()) { // G_TM_M_090

								forceLooprow25 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow25 = true;
						} // G 21

						row25Struct row25 = null;

						while ((tHash_Lookup_row25 != null && tHash_Lookup_row25.hasNext()) || forceLooprow25) { // G_TM_M_043

							// CALL close loop of lookup 'row25'

							row25Struct fromLookup_row25 = null;
							row25 = row25Default;

							if (!forceLooprow25) { // G 46

								fromLookup_row25 = tHash_Lookup_row25.next();

								if (fromLookup_row25 != null) {
									row25 = fromLookup_row25;
								}

							} // G 46

							forceLooprow25 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row26"
							///////////////////////////////////////////////

							boolean forceLooprow26 = false;

							row26Struct row26ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								tHash_Lookup_row26.lookup(row26HashKey);

								if (!tHash_Lookup_row26.hasNext()) { // G_TM_M_090

									forceLooprow26 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow26 = true;
							} // G 21

							row26Struct row26 = null;

							while ((tHash_Lookup_row26 != null && tHash_Lookup_row26.hasNext()) || forceLooprow26) { // G_TM_M_043

								// CALL close loop of lookup 'row26'

								row26Struct fromLookup_row26 = null;
								row26 = row26Default;

								if (!forceLooprow26) { // G 46

									fromLookup_row26 = tHash_Lookup_row26.next();

									if (fromLookup_row26 != null) {
										row26 = fromLookup_row26;
									}

								} // G 46

								forceLooprow26 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
									// ###############################
									// # Output tables

									to_create = null;

									if (!rejectedInnerJoin_tMap_7) {

// # Output table : 'to_create'
										to_create_tmp.patient_details = row23.details;
										to_create_tmp.facility_id = row24.id;
										to_create_tmp.lga_json = row24.lga_json;
										to_create_tmp.state_json = row24.state_json;
										to_create_tmp.client_code = row22.client_code;
										to_create_tmp.assessment_id = row22.assessment_id;
										to_create_tmp.surname = row22.surname;
										to_create_tmp.other_names = row22.other_names;
										to_create_tmp.date_birth = row22.date_birth;
										to_create_tmp.phone = row22.phone;
										to_create_tmp.address = row22.address;
										to_create_tmp.gender = row22.gender;
										to_create_tmp.marital_status = row22.marital_status;
										to_create_tmp.patient_uuid = row23.uuid;
										to_create_tmp.patient_number = row23.patient_number;
										to_create_tmp.marital_application_codeset = row25.marital_application_codeset;
										to_create_tmp.gender_application_codeset = row26.gender_application_codeset;
										to_create_tmp.country_json = row24.country_json;
										to_create_tmp.date_visit = row22.date_visit;
										to_create_tmp.uuid = row22.uuid;
										to_create_tmp.p_organisation_unit_id = row23.organisation_unit_id;
										to_create_tmp.p_created_by = row23.created_by;
										to_create_tmp.p_date_modified = row23.date_modified;
										to_create_tmp.p_date_created = row23.date_created;
										to_create_tmp.archived = row22.archived;
										to_create_tmp.last_modified = row22.last_modified;
										to_create_tmp.p_archived = row23.archived;
										to_create = to_create_tmp;
									} // closing inner join bracket (2)
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_7 = false;

								tos_count_tMap_7++;

								/**
								 * [tMap_7 main ] stop
								 */

								/**
								 * [tMap_7 process_data_begin ] start
								 */

								currentComponent = "tMap_7";

								/**
								 * [tMap_7 process_data_begin ] stop
								 */
// Start of branch "to_create"
								if (to_create != null) {

									/**
									 * [tJavaRow_3 main ] start
									 */

									currentComponent = "tJavaRow_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "to_create");
									}

									SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

									JSONArray gender = new JSONArray(to_create.gender_application_codeset);
									JSONArray marital = new JSONArray(to_create.marital_application_codeset);
									JSONObject json = new JSONObject();
									if (to_create.patient_details != null) {
										json = new JSONObject(to_create.patient_details);
										row27.patient_number = to_create.patient_number;
										row27.uuid = to_create.patient_uuid;
										row27.archived = to_create.p_archived;
										row27.created_by = to_create.p_created_by;
										row27.date_modified = to_create.p_date_modified;
										row27.organisation_unit_id = to_create.p_organisation_unit_id;

									} else {
										String tempHospitalNumber = "Temp_" + to_create.client_code;
										json.put("hospitalNumber", tempHospitalNumber);
										json.put("dateRegistration",
												to_create.date_visit != null ? formatter.format(to_create.date_visit)
														: JSONObject.NULL);
										json.put("patientHasOtherIdentifiers", true);
										String[] names = StringUtils.split(to_create.other_names, " ");
										json.put("firstName", names.length > 0 ? names[0] : "");
										json.put("otherNames", names.length > 1 ? names[1] : "");
										json.put("lastName", to_create.surname);
										// json.put("gender", to_create.patient_number);
										if (to_create.gender != null && to_create.gender != "") {
											String status = to_create.gender;
											JSONObject item = null;
											for (int x = 0; x < gender.length(); x++) {
												if (gender.getJSONObject(x).getString("display")
														.equalsIgnoreCase(status)) {
													item = gender.getJSONObject(x);
													break;
												}
											}

											if (item != null) {
												json.put("gender", item);
											} else {
												context.application_codeset_not_present = context.application_codeset_not_present
														+ (context.application_codeset_not_present != null
																&& context.application_codeset_not_present != "" ? ",'"
																		: "'")
														+ "Gender - " + status + "'";
											}

										}

										if (to_create.marital_status != null && to_create.marital_status != "") {
											String status = to_create.marital_status;
											JSONObject item = null;
											for (int x = 0; x < marital.length(); x++) {
												if (marital.getJSONObject(x).getString("display")
														.equalsIgnoreCase(status)) {
													item = marital.getJSONObject(x);
													break;
												}
											}

											if (item != null) {
												json.put("maritalStatus", item);
											} else {
												context.application_codeset_not_present = context.application_codeset_not_present
														+ (context.application_codeset_not_present != null
																&& context.application_codeset_not_present != "" ? ",'"
																		: "'")
														+ "Marital Status - " + status + "'";
											}

										}

										// json.put("maritalStatus", to_create.patient_number);
										json.put("dob",
												to_create.date_birth != null ? formatter.format(to_create.date_birth)
														: JSONObject.NULL);
										json.put("dobEstimated", false);
										json.put("mobilePhoneNumber", to_create.phone);
										json.put("country", new JSONObject(to_create.country_json));
										json.put("state", new JSONObject(to_create.state_json));
										json.put("province", new JSONObject(to_create.lga_json));
										json.put("street", to_create.address);
										row27.uuid = to_create.uuid;
										row27.archived = to_create.archived ? 1 : 0;
										// row27.created_by = to_create.p_created_by;
										row27.date_modified = to_create.last_modified;
										row27.organisation_unit_id = to_create.facility_id;
										row27.patient_number = tempHospitalNumber;

									}
									JSONArray otherIdentifiers = new JSONArray();
									JSONObject otherIdentifier = new JSONObject();
									otherIdentifier.put("identifier", to_create.client_code);
									otherIdentifier.put("patientHasOtherIdentifiers", true);
									JSONObject identifierType = new JSONObject();
									identifierType.put("id", 123);
									identifierType.put("code", "19ab5680-e714-4cf8-8809-b2d890d9b059");
									identifierType.put("display", "HTS Client Code ");
									identifierType.put("language", "en");
									identifierType.put("codesetGroup", "PATIENT_OTHER_IDENTIFIER");

									otherIdentifier.put("identifierType", identifierType);
									otherIdentifiers.put(otherIdentifier);
									json.put("otherIdentifiers", otherIdentifiers);

									row27.details = json.toString();

									nb_line_tJavaRow_3++;

									tos_count_tJavaRow_3++;

									/**
									 * [tJavaRow_3 main ] stop
									 */

									/**
									 * [tJavaRow_3 process_data_begin ] start
									 */

									currentComponent = "tJavaRow_3";

									/**
									 * [tJavaRow_3 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_7 main ] start
									 */

									currentComponent = "tDBOutput_7";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row27");
									}

									whetherReject_tDBOutput_7 = false;
									if (row27.patient_number == null) {
										pstmt_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_7.setString(1, row27.patient_number);
									}

									int checkCount_tDBOutput_7 = -1;
									try (java.sql.ResultSet rs_tDBOutput_7 = pstmt_tDBOutput_7.executeQuery()) {
										while (rs_tDBOutput_7.next()) {
											checkCount_tDBOutput_7 = rs_tDBOutput_7.getInt(1);
										}
									}
									if (checkCount_tDBOutput_7 > 0) {
										if (row27.patient_number == null) {
											pstmtUpdate_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_7.setString(1, row27.patient_number);
										}

										if (row27.details == null) {
											pstmtUpdate_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_7.setString(2, row27.details);
										}

										if (row27.uuid == null) {
											pstmtUpdate_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_7.setString(3, row27.uuid);
										}

										pstmtUpdate_tDBOutput_7.setInt(4, row27.archived);

										if (row27.created_by == null) {
											pstmtUpdate_tDBOutput_7.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_7.setString(5, row27.created_by);
										}

										if (row27.date_modified != null) {
											pstmtUpdate_tDBOutput_7.setTimestamp(6,
													new java.sql.Timestamp(row27.date_modified.getTime()));
										} else {
											pstmtUpdate_tDBOutput_7.setNull(6, java.sql.Types.TIMESTAMP);
										}

										pstmtUpdate_tDBOutput_7.setLong(7, row27.organisation_unit_id);

										if (row27.patient_number == null) {
											pstmtUpdate_tDBOutput_7.setNull(8 + count_tDBOutput_7,
													java.sql.Types.VARCHAR);
										} else {
											pstmtUpdate_tDBOutput_7.setString(8 + count_tDBOutput_7,
													row27.patient_number);
										}

										try {

											updatedCount_tDBOutput_7 = updatedCount_tDBOutput_7
													+ pstmtUpdate_tDBOutput_7.executeUpdate();
											nb_line_tDBOutput_7++;

										} catch (java.lang.Exception e) {

											whetherReject_tDBOutput_7 = true;
											nb_line_tDBOutput_7++;
											System.err.print(e.getMessage());
										}
									} else {
										if (row27.patient_number == null) {
											pstmtInsert_tDBOutput_7.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_7.setString(1, row27.patient_number);
										}

										if (row27.details == null) {
											pstmtInsert_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_7.setString(2, row27.details);
										}

										if (row27.uuid == null) {
											pstmtInsert_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_7.setString(3, row27.uuid);
										}

										pstmtInsert_tDBOutput_7.setInt(4, row27.archived);

										if (row27.created_by == null) {
											pstmtInsert_tDBOutput_7.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tDBOutput_7.setString(5, row27.created_by);
										}

										if (row27.date_modified != null) {
											pstmtInsert_tDBOutput_7.setTimestamp(6,
													new java.sql.Timestamp(row27.date_modified.getTime()));
										} else {
											pstmtInsert_tDBOutput_7.setNull(6, java.sql.Types.TIMESTAMP);
										}

										pstmtInsert_tDBOutput_7.setLong(7, row27.organisation_unit_id);

										try {

											insertedCount_tDBOutput_7 = insertedCount_tDBOutput_7
													+ pstmtInsert_tDBOutput_7.executeUpdate();
											nb_line_tDBOutput_7++;

										} catch (java.lang.Exception e) {

											whetherReject_tDBOutput_7 = true;
											nb_line_tDBOutput_7++;
											System.err.print(e.getMessage());
										}
									}
									commitCounter_tDBOutput_7++;
									if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
										conn_tDBOutput_7.commit();

										commitCounter_tDBOutput_7 = 0;
									}

									tos_count_tDBOutput_7++;

									/**
									 * [tDBOutput_7 main ] stop
									 */

									/**
									 * [tDBOutput_7 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_7";

									/**
									 * [tDBOutput_7 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_7 process_data_end ] start
									 */

									currentComponent = "tDBOutput_7";

									/**
									 * [tDBOutput_7 process_data_end ] stop
									 */

									/**
									 * [tJavaRow_3 process_data_end ] start
									 */

									currentComponent = "tJavaRow_3";

									/**
									 * [tJavaRow_3 process_data_end ] stop
									 */

								} // End of branch "to_create"

							} // close loop of lookup 'row26' // G_TM_M_043

						} // close loop of lookup 'row25' // G_TM_M_043

						/**
						 * [tMap_7 process_data_end ] start
						 */

						currentComponent = "tMap_7";

						/**
						 * [tMap_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_20 process_data_end ] start
						 */

						currentComponent = "tDBInput_20";

						/**
						 * [tDBInput_20 process_data_end ] stop
						 */

						/**
						 * [tDBInput_20 end ] start
						 */

						currentComponent = "tDBInput_20";

					}
				} finally {
					if (rs_tDBInput_20 != null) {
						rs_tDBInput_20.close();
					}
					if (stmt_tDBInput_20 != null) {
						stmt_tDBInput_20.close();
					}
					if (conn_tDBInput_20 != null && !conn_tDBInput_20.isClosed()) {

						conn_tDBInput_20.commit();

						conn_tDBInput_20.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_20_NB_LINE", nb_line_tDBInput_20);

				ok_Hash.put("tDBInput_20", true);
				end_Hash.put("tDBInput_20", System.currentTimeMillis());

				/**
				 * [tDBInput_20 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row23 != null) {
					tHash_Lookup_row23.endGet();
				}
				globalMap.remove("tHash_Lookup_row23");

				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

				if (tHash_Lookup_row25 != null) {
					tHash_Lookup_row25.endGet();
				}
				globalMap.remove("tHash_Lookup_row25");

				if (tHash_Lookup_row26 != null) {
					tHash_Lookup_row26.endGet();
				}
				globalMap.remove("tHash_Lookup_row26");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "to_create");
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				if (pstmtUpdate_tDBOutput_7 != null) {
					pstmtUpdate_tDBOutput_7.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_7");
				}
				if (pstmtInsert_tDBOutput_7 != null) {
					pstmtInsert_tDBOutput_7.close();
					resourceMap.remove("pstmtInsert_tDBOutput_7");
				}
				if (pstmt_tDBOutput_7 != null) {
					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");
				}
				resourceMap.put("statementClosed_tDBOutput_7", true);

				conn_tDBOutput_7.commit();

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row23");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row24");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row25");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row26");

			try {

				/**
				 * [tDBInput_20 finally ] start
				 */

				currentComponent = "tDBInput_20";

				/**
				 * [tDBInput_20 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_7 = null;
						if ((pstmtUpdateToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_7")) != null) {
							pstmtUpdateToClose_tDBOutput_7.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_7 = null;
						if ((pstmtInsertToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_7")) != null) {
							pstmtInsertToClose_tDBOutput_7.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_20_SUBPROCESS_STATE", 1);
	}

	public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
		final static byte[] commonByteArrayLock_LAMIS3_ETL_hts_migration = new byte[0];
		static byte[] commonByteArray_LAMIS3_ETL_hts_migration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String uuid;

		public String getUuid() {
			return this.uuid;
		}

		public String patient_number;

		public String getPatient_number() {
			return this.patient_number;
		}

		public String details;

		public String getDetails() {
			return this.details;
		}

		public Long organisation_unit_id;

		public Long getOrganisation_unit_id() {
			return this.organisation_unit_id;
		}

		public String created_by;

		public String getCreated_by() {
			return this.created_by;
		}

		public java.util.Date date_modified;

		public java.util.Date getDate_modified() {
			return this.date_modified;
		}

		public java.util.Date date_created;

		public java.util.Date getDate_created() {
			return this.date_created;
		}

		public Integer archived;

		public Integer getArchived() {
			return this.archived;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.patient_number == null) ? 0 : this.patient_number.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row23Struct other = (row23Struct) obj;

			if (this.patient_number == null) {
				if (other.patient_number != null)
					return false;

			} else if (!this.patient_number.equals(other.patient_number))

				return false;

			return true;
		}

		public void copyDataTo(row23Struct other) {

			other.uuid = this.uuid;
			other.patient_number = this.patient_number;
			other.details = this.details;
			other.organisation_unit_id = this.organisation_unit_id;
			other.created_by = this.created_by;
			other.date_modified = this.date_modified;
			other.date_created = this.date_created;
			other.archived = this.archived;

		}

		public void copyKeysDataTo(row23Struct other) {

			other.patient_number = this.patient_number;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LAMIS3_ETL_hts_migration.length) {
					if (length < 1024 && commonByteArray_LAMIS3_ETL_hts_migration.length == 0) {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[1024];
					} else {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LAMIS3_ETL_hts_migration, 0, length);
				strReturn = new String(commonByteArray_LAMIS3_ETL_hts_migration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LAMIS3_ETL_hts_migration) {

				try {

					int length = 0;

					this.patient_number = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.patient_number, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.uuid = readString(dis, ois);

				this.details = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.organisation_unit_id = null;
				} else {
					this.organisation_unit_id = dis.readLong();
				}

				this.created_by = readString(dis, ois);

				this.date_modified = readDate(dis, ois);

				this.date_created = readDate(dis, ois);

				this.archived = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.uuid, dos, oos);

				writeString(this.details, dos, oos);

				if (this.organisation_unit_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.organisation_unit_id);
				}

				writeString(this.created_by, dos, oos);

				writeDate(this.date_modified, dos, oos);

				writeDate(this.date_created, dos, oos);

				writeInteger(this.archived, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uuid=" + uuid);
			sb.append(",patient_number=" + patient_number);
			sb.append(",details=" + details);
			sb.append(",organisation_unit_id=" + String.valueOf(organisation_unit_id));
			sb.append(",created_by=" + created_by);
			sb.append(",date_modified=" + String.valueOf(date_modified));
			sb.append(",date_created=" + String.valueOf(date_created));
			sb.append(",archived=" + String.valueOf(archived));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.patient_number, other.patient_number);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();

				/**
				 * [tAdvancedHash_row23 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row23", false);
				start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row23";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tAdvancedHash_row23 = 0;

				// connection name:row23
				// source node:tDBInput_21 - inputs:(after_tDBInput_20) outputs:(row23,row23) |
				// target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
				// linked node: tMap_7 - inputs:(row22,row23,row24,row25,row26)
				// outputs:(to_create)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row23Struct>getLookup(matchingModeEnum_row23);

				globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);

				/**
				 * [tAdvancedHash_row23 begin ] stop
				 */

				/**
				 * [tDBInput_21 begin ] start
				 */

				ok_Hash.put("tDBInput_21", false);
				start_Hash.put("tDBInput_21", System.currentTimeMillis());

				currentComponent = "tDBInput_21";

				int tos_count_tDBInput_21 = 0;

				int nb_line_tDBInput_21 = 0;
				java.sql.Connection conn_tDBInput_21 = null;
				String driverClass_tDBInput_21 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_21 = java.lang.Class.forName(driverClass_tDBInput_21);
				String dbUser_tDBInput_21 = context.LAMISPlus_Login;

				final String decryptedPassword_tDBInput_21 = context.LAMISPlus_Password;

				String dbPwd_tDBInput_21 = decryptedPassword_tDBInput_21;

				String url_tDBInput_21 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port
						+ "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;

				conn_tDBInput_21 = java.sql.DriverManager.getConnection(url_tDBInput_21, dbUser_tDBInput_21,
						dbPwd_tDBInput_21);

				conn_tDBInput_21.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_21 = conn_tDBInput_21.createStatement();

				String dbquery_tDBInput_21 = "select uuid, patient_number, details, organisation_unit_id, created_by, date_modified, date_created, archived  from pat"
						+ "ient";

				globalMap.put("tDBInput_21_QUERY", dbquery_tDBInput_21);
				java.sql.ResultSet rs_tDBInput_21 = null;

				try {
					rs_tDBInput_21 = stmt_tDBInput_21.executeQuery(dbquery_tDBInput_21);
					java.sql.ResultSetMetaData rsmd_tDBInput_21 = rs_tDBInput_21.getMetaData();
					int colQtyInRs_tDBInput_21 = rsmd_tDBInput_21.getColumnCount();

					String tmpContent_tDBInput_21 = null;

					while (rs_tDBInput_21.next()) {
						nb_line_tDBInput_21++;

						if (colQtyInRs_tDBInput_21 < 1) {
							row23.uuid = null;
						} else {

							row23.uuid = routines.system.JDBCUtil.getString(rs_tDBInput_21, 1, false);
						}
						if (colQtyInRs_tDBInput_21 < 2) {
							row23.patient_number = null;
						} else {

							row23.patient_number = routines.system.JDBCUtil.getString(rs_tDBInput_21, 2, false);
						}
						if (colQtyInRs_tDBInput_21 < 3) {
							row23.details = null;
						} else {

							row23.details = routines.system.JDBCUtil.getString(rs_tDBInput_21, 3, false);
						}
						if (colQtyInRs_tDBInput_21 < 4) {
							row23.organisation_unit_id = null;
						} else {

							row23.organisation_unit_id = rs_tDBInput_21.getLong(4);
							if (rs_tDBInput_21.wasNull()) {
								row23.organisation_unit_id = null;
							}
						}
						if (colQtyInRs_tDBInput_21 < 5) {
							row23.created_by = null;
						} else {

							row23.created_by = routines.system.JDBCUtil.getString(rs_tDBInput_21, 5, false);
						}
						if (colQtyInRs_tDBInput_21 < 6) {
							row23.date_modified = null;
						} else {

							row23.date_modified = routines.system.JDBCUtil.getDate(rs_tDBInput_21, 6);
						}
						if (colQtyInRs_tDBInput_21 < 7) {
							row23.date_created = null;
						} else {

							row23.date_created = routines.system.JDBCUtil.getDate(rs_tDBInput_21, 7);
						}
						if (colQtyInRs_tDBInput_21 < 8) {
							row23.archived = null;
						} else {

							row23.archived = rs_tDBInput_21.getInt(8);
							if (rs_tDBInput_21.wasNull()) {
								row23.archived = null;
							}
						}

						/**
						 * [tDBInput_21 begin ] stop
						 */

						/**
						 * [tDBInput_21 main ] start
						 */

						currentComponent = "tDBInput_21";

						tos_count_tDBInput_21++;

						/**
						 * [tDBInput_21 main ] stop
						 */

						/**
						 * [tDBInput_21 process_data_begin ] start
						 */

						currentComponent = "tDBInput_21";

						/**
						 * [tDBInput_21 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row23 main ] start
						 */

						currentComponent = "tAdvancedHash_row23";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row23");
						}

						row23Struct row23_HashRow = new row23Struct();

						row23_HashRow.uuid = row23.uuid;

						row23_HashRow.patient_number = row23.patient_number;

						row23_HashRow.details = row23.details;

						row23_HashRow.organisation_unit_id = row23.organisation_unit_id;

						row23_HashRow.created_by = row23.created_by;

						row23_HashRow.date_modified = row23.date_modified;

						row23_HashRow.date_created = row23.date_created;

						row23_HashRow.archived = row23.archived;

						tHash_Lookup_row23.put(row23_HashRow);

						tos_count_tAdvancedHash_row23++;

						/**
						 * [tAdvancedHash_row23 main ] stop
						 */

						/**
						 * [tAdvancedHash_row23 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row23";

						/**
						 * [tAdvancedHash_row23 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row23 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row23";

						/**
						 * [tAdvancedHash_row23 process_data_end ] stop
						 */

						/**
						 * [tDBInput_21 process_data_end ] start
						 */

						currentComponent = "tDBInput_21";

						/**
						 * [tDBInput_21 process_data_end ] stop
						 */

						/**
						 * [tDBInput_21 end ] start
						 */

						currentComponent = "tDBInput_21";

					}
				} finally {
					if (rs_tDBInput_21 != null) {
						rs_tDBInput_21.close();
					}
					if (stmt_tDBInput_21 != null) {
						stmt_tDBInput_21.close();
					}
					if (conn_tDBInput_21 != null && !conn_tDBInput_21.isClosed()) {

						conn_tDBInput_21.commit();

						conn_tDBInput_21.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_21_NB_LINE", nb_line_tDBInput_21);

				ok_Hash.put("tDBInput_21", true);
				end_Hash.put("tDBInput_21", System.currentTimeMillis());

				/**
				 * [tDBInput_21 end ] stop
				 */

				/**
				 * [tAdvancedHash_row23 end ] start
				 */

				currentComponent = "tAdvancedHash_row23";

				tHash_Lookup_row23.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tAdvancedHash_row23", true);
				end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row23 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_21 finally ] start
				 */

				currentComponent = "tDBInput_21";

				/**
				 * [tDBInput_21 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row23 finally ] start
				 */

				currentComponent = "tAdvancedHash_row23";

				/**
				 * [tAdvancedHash_row23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_21_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements routines.system.IPersistableComparableLookupRow<row24Struct> {
		final static byte[] commonByteArrayLock_LAMIS3_ETL_hts_migration = new byte[0];
		static byte[] commonByteArray_LAMIS3_ETL_hts_migration = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public String facility_name;

		public String getFacility_name() {
			return this.facility_name;
		}

		public String lga_json;

		public String getLga_json() {
			return this.lga_json;
		}

		public String state_json;

		public String getState_json() {
			return this.state_json;
		}

		public String country_json;

		public String getCountry_json() {
			return this.country_json;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.facility_name == null) ? 0 : this.facility_name.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.facility_name == null) {
				if (other.facility_name != null)
					return false;

			} else if (!this.facility_name.equals(other.facility_name))

				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.id = this.id;
			other.facility_name = this.facility_name;
			other.lga_json = this.lga_json;
			other.state_json = this.state_json;
			other.country_json = this.country_json;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.facility_name = this.facility_name;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LAMIS3_ETL_hts_migration.length) {
					if (length < 1024 && commonByteArray_LAMIS3_ETL_hts_migration.length == 0) {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[1024];
					} else {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LAMIS3_ETL_hts_migration, 0, length);
				strReturn = new String(commonByteArray_LAMIS3_ETL_hts_migration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LAMIS3_ETL_hts_migration) {

				try {

					int length = 0;

					this.facility_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.facility_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id = dis.readLong();

				this.lga_json = readString(dis, ois);

				this.state_json = readString(dis, ois);

				this.country_json = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id);

				writeString(this.lga_json, dos, oos);

				writeString(this.state_json, dos, oos);

				writeString(this.country_json, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",facility_name=" + facility_name);
			sb.append(",lga_json=" + lga_json);
			sb.append(",state_json=" + state_json);
			sb.append(",country_json=" + country_json);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.facility_name, other.facility_name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tAdvancedHash_row24 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row24", false);
				start_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tAdvancedHash_row24 = 0;

				// connection name:row24
				// source node:tDBInput_22 - inputs:(after_tDBInput_20) outputs:(row24,row24) |
				// target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
				// linked node: tMap_7 - inputs:(row22,row23,row24,row25,row26)
				// outputs:(to_create)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row24Struct>getLookup(matchingModeEnum_row24);

				globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);

				/**
				 * [tAdvancedHash_row24 begin ] stop
				 */

				/**
				 * [tDBInput_22 begin ] start
				 */

				ok_Hash.put("tDBInput_22", false);
				start_Hash.put("tDBInput_22", System.currentTimeMillis());

				currentComponent = "tDBInput_22";

				int tos_count_tDBInput_22 = 0;

				int nb_line_tDBInput_22 = 0;
				java.sql.Connection conn_tDBInput_22 = null;
				String driverClass_tDBInput_22 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_22 = java.lang.Class.forName(driverClass_tDBInput_22);
				String dbUser_tDBInput_22 = context.LAMISPlus_Login;

				final String decryptedPassword_tDBInput_22 = context.LAMISPlus_Password;

				String dbPwd_tDBInput_22 = decryptedPassword_tDBInput_22;

				String url_tDBInput_22 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port
						+ "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;

				conn_tDBInput_22 = java.sql.DriverManager.getConnection(url_tDBInput_22, dbUser_tDBInput_22,
						dbPwd_tDBInput_22);

				conn_tDBInput_22.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_22 = conn_tDBInput_22.createStatement();

				String dbquery_tDBInput_22 = "select l.id, upper(l.name) as facility_name, \njson_build_object('id', s.name, 'name', s.name, 'description',s.descript"
						+ "ion, 'organisationUnitLevelId', s.organisation_unit_level_id, 'parentOrganisationUnitId', s.parent_organisation_unit_id)"
						+ " as lga_json, \njson_build_object('id', o.name, 'name', o.name, 'description',o.description, 'organisationUnitLevelId', "
						+ "o.organisation_unit_level_id, 'parentOrganisationUnitId', o.parent_organisation_unit_id) as state_json,\njson_build_obje"
						+ "ct('id', c.name, 'name', c.name, 'description',c.description, 'organisationUnitLevelId', c.organisation_unit_level_id, '"
						+ "parentOrganisationUnitId', c.parent_organisation_unit_id) as country_json  \nfrom organisation_unit l \ninner join organ"
						+ "isation_unit s on l.parent_organisation_unit_id = s.id\ninner join organisation_unit o on s.parent_organisation_unit_id "
						+ "= o.id\ninner join organisation_unit c on o.parent_organisation_unit_id = c.id\nwhere l.organisation_unit_level_id in (4"
						+ ")";

				globalMap.put("tDBInput_22_QUERY", dbquery_tDBInput_22);
				java.sql.ResultSet rs_tDBInput_22 = null;

				try {
					rs_tDBInput_22 = stmt_tDBInput_22.executeQuery(dbquery_tDBInput_22);
					java.sql.ResultSetMetaData rsmd_tDBInput_22 = rs_tDBInput_22.getMetaData();
					int colQtyInRs_tDBInput_22 = rsmd_tDBInput_22.getColumnCount();

					String tmpContent_tDBInput_22 = null;

					while (rs_tDBInput_22.next()) {
						nb_line_tDBInput_22++;

						if (colQtyInRs_tDBInput_22 < 1) {
							row24.id = 0;
						} else {

							row24.id = rs_tDBInput_22.getLong(1);
							if (rs_tDBInput_22.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_22 < 2) {
							row24.facility_name = null;
						} else {

							row24.facility_name = routines.system.JDBCUtil.getString(rs_tDBInput_22, 2, false);
						}
						if (colQtyInRs_tDBInput_22 < 3) {
							row24.lga_json = null;
						} else {

							row24.lga_json = routines.system.JDBCUtil.getString(rs_tDBInput_22, 3, false);
						}
						if (colQtyInRs_tDBInput_22 < 4) {
							row24.state_json = null;
						} else {

							row24.state_json = routines.system.JDBCUtil.getString(rs_tDBInput_22, 4, false);
						}
						if (colQtyInRs_tDBInput_22 < 5) {
							row24.country_json = null;
						} else {

							row24.country_json = routines.system.JDBCUtil.getString(rs_tDBInput_22, 5, false);
						}

						/**
						 * [tDBInput_22 begin ] stop
						 */

						/**
						 * [tDBInput_22 main ] start
						 */

						currentComponent = "tDBInput_22";

						tos_count_tDBInput_22++;

						/**
						 * [tDBInput_22 main ] stop
						 */

						/**
						 * [tDBInput_22 process_data_begin ] start
						 */

						currentComponent = "tDBInput_22";

						/**
						 * [tDBInput_22 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row24 main ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row24");
						}

						row24Struct row24_HashRow = new row24Struct();

						row24_HashRow.id = row24.id;

						row24_HashRow.facility_name = row24.facility_name;

						row24_HashRow.lga_json = row24.lga_json;

						row24_HashRow.state_json = row24.state_json;

						row24_HashRow.country_json = row24.country_json;

						tHash_Lookup_row24.put(row24_HashRow);

						tos_count_tAdvancedHash_row24++;

						/**
						 * [tAdvancedHash_row24 main ] stop
						 */

						/**
						 * [tAdvancedHash_row24 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						/**
						 * [tAdvancedHash_row24 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row24 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						/**
						 * [tAdvancedHash_row24 process_data_end ] stop
						 */

						/**
						 * [tDBInput_22 process_data_end ] start
						 */

						currentComponent = "tDBInput_22";

						/**
						 * [tDBInput_22 process_data_end ] stop
						 */

						/**
						 * [tDBInput_22 end ] start
						 */

						currentComponent = "tDBInput_22";

					}
				} finally {
					if (rs_tDBInput_22 != null) {
						rs_tDBInput_22.close();
					}
					if (stmt_tDBInput_22 != null) {
						stmt_tDBInput_22.close();
					}
					if (conn_tDBInput_22 != null && !conn_tDBInput_22.isClosed()) {

						conn_tDBInput_22.commit();

						conn_tDBInput_22.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_22_NB_LINE", nb_line_tDBInput_22);

				ok_Hash.put("tDBInput_22", true);
				end_Hash.put("tDBInput_22", System.currentTimeMillis());

				/**
				 * [tDBInput_22 end ] stop
				 */

				/**
				 * [tAdvancedHash_row24 end ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				tHash_Lookup_row24.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tAdvancedHash_row24", true);
				end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row24 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_22 finally ] start
				 */

				currentComponent = "tDBInput_22";

				/**
				 * [tDBInput_22 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row24 finally ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				/**
				 * [tAdvancedHash_row24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_22_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_LAMIS3_ETL_hts_migration = new byte[0];
		static byte[] commonByteArray_LAMIS3_ETL_hts_migration = new byte[0];

		public String marital_application_codeset;

		public String getMarital_application_codeset() {
			return this.marital_application_codeset;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LAMIS3_ETL_hts_migration.length) {
					if (length < 1024 && commonByteArray_LAMIS3_ETL_hts_migration.length == 0) {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[1024];
					} else {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LAMIS3_ETL_hts_migration, 0, length);
				strReturn = new String(commonByteArray_LAMIS3_ETL_hts_migration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LAMIS3_ETL_hts_migration) {

				try {

					int length = 0;

					this.marital_application_codeset = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.marital_application_codeset, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("marital_application_codeset=" + marital_application_codeset);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();

				/**
				 * [tAdvancedHash_row25 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row25", false);
				start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row25";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tAdvancedHash_row25 = 0;

				// connection name:row25
				// source node:tDBInput_23 - inputs:(after_tDBInput_20) outputs:(row25,row25) |
				// target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
				// linked node: tMap_7 - inputs:(row22,row23,row24,row25,row26)
				// outputs:(to_create)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row25Struct>getLookup(matchingModeEnum_row25);

				globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);

				/**
				 * [tAdvancedHash_row25 begin ] stop
				 */

				/**
				 * [tDBInput_23 begin ] start
				 */

				ok_Hash.put("tDBInput_23", false);
				start_Hash.put("tDBInput_23", System.currentTimeMillis());

				currentComponent = "tDBInput_23";

				int tos_count_tDBInput_23 = 0;

				int nb_line_tDBInput_23 = 0;
				java.sql.Connection conn_tDBInput_23 = null;
				String driverClass_tDBInput_23 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_23 = java.lang.Class.forName(driverClass_tDBInput_23);
				String dbUser_tDBInput_23 = context.LAMISPlus_Login;

				final String decryptedPassword_tDBInput_23 = context.LAMISPlus_Password;

				String dbPwd_tDBInput_23 = decryptedPassword_tDBInput_23;

				String url_tDBInput_23 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port
						+ "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;

				conn_tDBInput_23 = java.sql.DriverManager.getConnection(url_tDBInput_23, dbUser_tDBInput_23,
						dbPwd_tDBInput_23);

				conn_tDBInput_23.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_23 = conn_tDBInput_23.createStatement();

				String dbquery_tDBInput_23 = "select array_to_json(array(select json_build_object('id', id, 'display',display,'codeset_group',codeset_group,'code',co"
						+ "de,'language',language) as json_object \n from application_codeset where codeset_group in ('MARITAL _STATUS'))) as marit"
						+ "al_application_codeset ";

				globalMap.put("tDBInput_23_QUERY", dbquery_tDBInput_23);
				java.sql.ResultSet rs_tDBInput_23 = null;

				try {
					rs_tDBInput_23 = stmt_tDBInput_23.executeQuery(dbquery_tDBInput_23);
					java.sql.ResultSetMetaData rsmd_tDBInput_23 = rs_tDBInput_23.getMetaData();
					int colQtyInRs_tDBInput_23 = rsmd_tDBInput_23.getColumnCount();

					String tmpContent_tDBInput_23 = null;

					while (rs_tDBInput_23.next()) {
						nb_line_tDBInput_23++;

						if (colQtyInRs_tDBInput_23 < 1) {
							row25.marital_application_codeset = null;
						} else {

							row25.marital_application_codeset = routines.system.JDBCUtil.getString(rs_tDBInput_23, 1,
									false);
						}

						/**
						 * [tDBInput_23 begin ] stop
						 */

						/**
						 * [tDBInput_23 main ] start
						 */

						currentComponent = "tDBInput_23";

						tos_count_tDBInput_23++;

						/**
						 * [tDBInput_23 main ] stop
						 */

						/**
						 * [tDBInput_23 process_data_begin ] start
						 */

						currentComponent = "tDBInput_23";

						/**
						 * [tDBInput_23 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row25 main ] start
						 */

						currentComponent = "tAdvancedHash_row25";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row25");
						}

						row25Struct row25_HashRow = new row25Struct();

						row25_HashRow.marital_application_codeset = row25.marital_application_codeset;

						tHash_Lookup_row25.put(row25_HashRow);

						tos_count_tAdvancedHash_row25++;

						/**
						 * [tAdvancedHash_row25 main ] stop
						 */

						/**
						 * [tAdvancedHash_row25 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row25";

						/**
						 * [tAdvancedHash_row25 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row25 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row25";

						/**
						 * [tAdvancedHash_row25 process_data_end ] stop
						 */

						/**
						 * [tDBInput_23 process_data_end ] start
						 */

						currentComponent = "tDBInput_23";

						/**
						 * [tDBInput_23 process_data_end ] stop
						 */

						/**
						 * [tDBInput_23 end ] start
						 */

						currentComponent = "tDBInput_23";

					}
				} finally {
					if (rs_tDBInput_23 != null) {
						rs_tDBInput_23.close();
					}
					if (stmt_tDBInput_23 != null) {
						stmt_tDBInput_23.close();
					}
					if (conn_tDBInput_23 != null && !conn_tDBInput_23.isClosed()) {

						conn_tDBInput_23.commit();

						conn_tDBInput_23.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_23_NB_LINE", nb_line_tDBInput_23);

				ok_Hash.put("tDBInput_23", true);
				end_Hash.put("tDBInput_23", System.currentTimeMillis());

				/**
				 * [tDBInput_23 end ] stop
				 */

				/**
				 * [tAdvancedHash_row25 end ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				tHash_Lookup_row25.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tAdvancedHash_row25", true);
				end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row25 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_23 finally ] start
				 */

				currentComponent = "tDBInput_23";

				/**
				 * [tDBInput_23 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row25 finally ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				/**
				 * [tAdvancedHash_row25 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_23_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_LAMIS3_ETL_hts_migration = new byte[0];
		static byte[] commonByteArray_LAMIS3_ETL_hts_migration = new byte[0];

		public String gender_application_codeset;

		public String getGender_application_codeset() {
			return this.gender_application_codeset;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LAMIS3_ETL_hts_migration.length) {
					if (length < 1024 && commonByteArray_LAMIS3_ETL_hts_migration.length == 0) {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[1024];
					} else {
						commonByteArray_LAMIS3_ETL_hts_migration = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LAMIS3_ETL_hts_migration, 0, length);
				strReturn = new String(commonByteArray_LAMIS3_ETL_hts_migration, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LAMIS3_ETL_hts_migration) {

				try {

					int length = 0;

					this.gender_application_codeset = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.gender_application_codeset, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("gender_application_codeset=" + gender_application_codeset);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tAdvancedHash_row26 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row26", false);
				start_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tAdvancedHash_row26 = 0;

				// connection name:row26
				// source node:tDBInput_24 - inputs:(after_tDBInput_20) outputs:(row26,row26) |
				// target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
				// linked node: tMap_7 - inputs:(row22,row23,row24,row25,row26)
				// outputs:(to_create)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row26Struct>getLookup(matchingModeEnum_row26);

				globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);

				/**
				 * [tAdvancedHash_row26 begin ] stop
				 */

				/**
				 * [tDBInput_24 begin ] start
				 */

				ok_Hash.put("tDBInput_24", false);
				start_Hash.put("tDBInput_24", System.currentTimeMillis());

				currentComponent = "tDBInput_24";

				int tos_count_tDBInput_24 = 0;

				int nb_line_tDBInput_24 = 0;
				java.sql.Connection conn_tDBInput_24 = null;
				String driverClass_tDBInput_24 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_24 = java.lang.Class.forName(driverClass_tDBInput_24);
				String dbUser_tDBInput_24 = context.LAMISPlus_Login;

				final String decryptedPassword_tDBInput_24 = context.LAMISPlus_Password;

				String dbPwd_tDBInput_24 = decryptedPassword_tDBInput_24;

				String url_tDBInput_24 = "jdbc:postgresql://" + context.LAMISPlus_Server + ":" + context.LAMISPlus_Port
						+ "/" + context.LAMISPlus_Database + "?" + context.LAMISPlus_AdditionalParams;

				conn_tDBInput_24 = java.sql.DriverManager.getConnection(url_tDBInput_24, dbUser_tDBInput_24,
						dbPwd_tDBInput_24);

				conn_tDBInput_24.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_24 = conn_tDBInput_24.createStatement();

				String dbquery_tDBInput_24 = "select array_to_json(array(select json_build_object('id', id, 'display',display,'codeset_group',codeset_group,'code',co"
						+ "de,'language',language) as json_object \n from application_codeset where codeset_group in ('GENDER'))) as gender_applica"
						+ "tion_codeset ";

				globalMap.put("tDBInput_24_QUERY", dbquery_tDBInput_24);
				java.sql.ResultSet rs_tDBInput_24 = null;

				try {
					rs_tDBInput_24 = stmt_tDBInput_24.executeQuery(dbquery_tDBInput_24);
					java.sql.ResultSetMetaData rsmd_tDBInput_24 = rs_tDBInput_24.getMetaData();
					int colQtyInRs_tDBInput_24 = rsmd_tDBInput_24.getColumnCount();

					String tmpContent_tDBInput_24 = null;

					while (rs_tDBInput_24.next()) {
						nb_line_tDBInput_24++;

						if (colQtyInRs_tDBInput_24 < 1) {
							row26.gender_application_codeset = null;
						} else {

							row26.gender_application_codeset = routines.system.JDBCUtil.getString(rs_tDBInput_24, 1,
									false);
						}

						/**
						 * [tDBInput_24 begin ] stop
						 */

						/**
						 * [tDBInput_24 main ] start
						 */

						currentComponent = "tDBInput_24";

						tos_count_tDBInput_24++;

						/**
						 * [tDBInput_24 main ] stop
						 */

						/**
						 * [tDBInput_24 process_data_begin ] start
						 */

						currentComponent = "tDBInput_24";

						/**
						 * [tDBInput_24 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row26 main ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row26");
						}

						row26Struct row26_HashRow = new row26Struct();

						row26_HashRow.gender_application_codeset = row26.gender_application_codeset;

						tHash_Lookup_row26.put(row26_HashRow);

						tos_count_tAdvancedHash_row26++;

						/**
						 * [tAdvancedHash_row26 main ] stop
						 */

						/**
						 * [tAdvancedHash_row26 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						/**
						 * [tAdvancedHash_row26 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row26 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						/**
						 * [tAdvancedHash_row26 process_data_end ] stop
						 */

						/**
						 * [tDBInput_24 process_data_end ] start
						 */

						currentComponent = "tDBInput_24";

						/**
						 * [tDBInput_24 process_data_end ] stop
						 */

						/**
						 * [tDBInput_24 end ] start
						 */

						currentComponent = "tDBInput_24";

					}
				} finally {
					if (rs_tDBInput_24 != null) {
						rs_tDBInput_24.close();
					}
					if (stmt_tDBInput_24 != null) {
						stmt_tDBInput_24.close();
					}
					if (conn_tDBInput_24 != null && !conn_tDBInput_24.isClosed()) {

						conn_tDBInput_24.commit();

						conn_tDBInput_24.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_24_NB_LINE", nb_line_tDBInput_24);

				ok_Hash.put("tDBInput_24", true);
				end_Hash.put("tDBInput_24", System.currentTimeMillis());

				/**
				 * [tDBInput_24 end ] stop
				 */

				/**
				 * [tAdvancedHash_row26 end ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				tHash_Lookup_row26.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tAdvancedHash_row26", true);
				end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row26 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_24 finally ] start
				 */

				currentComponent = "tDBInput_24";

				/**
				 * [tDBInput_24 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row26 finally ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				/**
				 * [tAdvancedHash_row26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_24_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final hts_migration hts_migrationClass = new hts_migration();

		int exitCode = hts_migrationClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = hts_migration.class.getClassLoader()
					.getResourceAsStream("lamis3_etl/hts_migration_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = hts_migration.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("LAMIS3_Password", "id_Password");
					String pwd_LAMIS3_Password_value = context.getProperty("LAMIS3_Password");
					context.LAMIS3_Password = null;
					if (pwd_LAMIS3_Password_value != null) {
						if (context_param.containsKey("LAMIS3_Password")) {// no need to decrypt if it come from program
																			// argument or parent job runtime
							context.LAMIS3_Password = pwd_LAMIS3_Password_value;
						} else if (!pwd_LAMIS3_Password_value.isEmpty()) {
							try {
								context.LAMIS3_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_LAMIS3_Password_value);
								context.put("LAMIS3_Password", context.LAMIS3_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("LAMIS3_Server", "id_String");
					context.LAMIS3_Server = (String) context.getProperty("LAMIS3_Server");
					context.setContextType("LAMIS3_Login", "id_String");
					context.LAMIS3_Login = (String) context.getProperty("LAMIS3_Login");
					context.setContextType("LAMIS3_Port", "id_String");
					context.LAMIS3_Port = (String) context.getProperty("LAMIS3_Port");
					context.setContextType("LAMIS3_Database", "id_String");
					context.LAMIS3_Database = (String) context.getProperty("LAMIS3_Database");
					context.setContextType("LAMIS3_AdditionalParams", "id_String");
					context.LAMIS3_AdditionalParams = (String) context.getProperty("LAMIS3_AdditionalParams");
					context.setContextType("LAMIS3_Schema", "id_String");
					context.LAMIS3_Schema = (String) context.getProperty("LAMIS3_Schema");
					context.setContextType("LAMISPlus_Server", "id_String");
					context.LAMISPlus_Server = (String) context.getProperty("LAMISPlus_Server");
					context.setContextType("LAMISPlus_Schema", "id_String");
					context.LAMISPlus_Schema = (String) context.getProperty("LAMISPlus_Schema");
					context.setContextType("LAMISPlus_AdditionalParams", "id_String");
					context.LAMISPlus_AdditionalParams = (String) context.getProperty("LAMISPlus_AdditionalParams");
					context.setContextType("LAMISPlus_Login", "id_String");
					context.LAMISPlus_Login = (String) context.getProperty("LAMISPlus_Login");
					context.setContextType("LAMISPlus_Password", "id_Password");
					String pwd_LAMISPlus_Password_value = context.getProperty("LAMISPlus_Password");
					context.LAMISPlus_Password = null;
					if (pwd_LAMISPlus_Password_value != null) {
						if (context_param.containsKey("LAMISPlus_Password")) {// no need to decrypt if it come from
																				// program argument or parent job
																				// runtime
							context.LAMISPlus_Password = pwd_LAMISPlus_Password_value;
						} else if (!pwd_LAMISPlus_Password_value.isEmpty()) {
							try {
								context.LAMISPlus_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_LAMISPlus_Password_value);
								context.put("LAMISPlus_Password", context.LAMISPlus_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("LAMISPlus_Database", "id_String");
					context.LAMISPlus_Database = (String) context.getProperty("LAMISPlus_Database");
					context.setContextType("LAMISPlus_Port", "id_String");
					context.LAMISPlus_Port = (String) context.getProperty("LAMISPlus_Port");
					context.setContextType("application_codeset_not_present", "id_List Of Value");
					context.application_codeset_not_present = (String) context
							.getProperty("application_codeset_not_present");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("LAMIS3_Password")) {
				context.LAMIS3_Password = (java.lang.String) parentContextMap.get("LAMIS3_Password");
			}
			if (parentContextMap.containsKey("LAMIS3_Server")) {
				context.LAMIS3_Server = (String) parentContextMap.get("LAMIS3_Server");
			}
			if (parentContextMap.containsKey("LAMIS3_Login")) {
				context.LAMIS3_Login = (String) parentContextMap.get("LAMIS3_Login");
			}
			if (parentContextMap.containsKey("LAMIS3_Port")) {
				context.LAMIS3_Port = (String) parentContextMap.get("LAMIS3_Port");
			}
			if (parentContextMap.containsKey("LAMIS3_Database")) {
				context.LAMIS3_Database = (String) parentContextMap.get("LAMIS3_Database");
			}
			if (parentContextMap.containsKey("LAMIS3_AdditionalParams")) {
				context.LAMIS3_AdditionalParams = (String) parentContextMap.get("LAMIS3_AdditionalParams");
			}
			if (parentContextMap.containsKey("LAMIS3_Schema")) {
				context.LAMIS3_Schema = (String) parentContextMap.get("LAMIS3_Schema");
			}
			if (parentContextMap.containsKey("LAMISPlus_Server")) {
				context.LAMISPlus_Server = (String) parentContextMap.get("LAMISPlus_Server");
			}
			if (parentContextMap.containsKey("LAMISPlus_Schema")) {
				context.LAMISPlus_Schema = (String) parentContextMap.get("LAMISPlus_Schema");
			}
			if (parentContextMap.containsKey("LAMISPlus_AdditionalParams")) {
				context.LAMISPlus_AdditionalParams = (String) parentContextMap.get("LAMISPlus_AdditionalParams");
			}
			if (parentContextMap.containsKey("LAMISPlus_Login")) {
				context.LAMISPlus_Login = (String) parentContextMap.get("LAMISPlus_Login");
			}
			if (parentContextMap.containsKey("LAMISPlus_Password")) {
				context.LAMISPlus_Password = (java.lang.String) parentContextMap.get("LAMISPlus_Password");
			}
			if (parentContextMap.containsKey("LAMISPlus_Database")) {
				context.LAMISPlus_Database = (String) parentContextMap.get("LAMISPlus_Database");
			}
			if (parentContextMap.containsKey("LAMISPlus_Port")) {
				context.LAMISPlus_Port = (String) parentContextMap.get("LAMISPlus_Port");
			}
			if (parentContextMap.containsKey("application_codeset_not_present")) {
				context.application_codeset_not_present = (String) parentContextMap
						.get("application_codeset_not_present");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("LAMIS3_Password");
		parametersToEncrypt.add("LAMISPlus_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_5) {
			globalMap.put("tJava_5_SUBPROCESS_STATE", -1);

			e_tJava_5.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_4) {
			globalMap.put("tJava_4_SUBPROCESS_STATE", -1);

			e_tJava_4.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_6) {
			globalMap.put("tJava_6_SUBPROCESS_STATE", -1);

			e_tJava_6.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_8) {
			globalMap.put("tJava_8_SUBPROCESS_STATE", -1);

			e_tJava_8.printStackTrace();

		}
		try {
			errorCode = null;
			tLibraryLoad_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_3) {
			globalMap.put("tLibraryLoad_3_SUBPROCESS_STATE", -1);

			e_tLibraryLoad_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : hts_migration");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 286270 characters generated by Talend Open Studio for Big Data on the May 24,
 * 2021 6:07:47 PM WAT
 ************************************************************************************************/